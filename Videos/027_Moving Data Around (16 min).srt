
1
00:00:00,088 --> 00:00:02,049
In this second tutorial video on

2
00:00:02,062 --> 00:00:03,054
Octave, I'd like to start

3
00:00:03,093 --> 00:00:06,046
to tell you how to move data around in Octave.

4
00:00:07,033 --> 00:00:08,046
So, if you have data for

5
00:00:08,076 --> 00:00:11,050
a machine learning problem, how do you load that data in Octave?

6
00:00:12,036 --> 00:00:13,036
How do you put it into matrix?

7
00:00:13,067 --> 00:00:14,073
How do you manipulate these matrices?

8
00:00:15,028 --> 00:00:16,012
How do you save the results?

9
00:00:17,000 --> 00:00:19,039
How do you move data around and operate with data?

10
00:00:22,089 --> 00:00:24,089
Here's my Octave window as

11
00:00:25,001 --> 00:00:28,001
before, picking up from where we left off in the last video.

12
00:00:29,028 --> 00:00:30,083
If I type A, that's

13
00:00:31,014 --> 00:00:31,092
the matrix so we generate it, right,

14
00:00:31,092 --> 00:00:34,032
with this command equals one, two,

15
00:00:35,017 --> 00:00:37,049
three, four, five, six, and

16
00:00:38,018 --> 00:00:39,045
this is a three by two matrix.

17
00:00:40,071 --> 00:00:41,082
The size command in Octave

18
00:00:42,042 --> 00:00:46,013
lets you, tells you what is the size of a matrix.

19
00:00:46,034 --> 00:00:47,092
So size A returns three, two.

20
00:00:48,017 --> 00:00:49,096
It turns out that

21
00:00:50,017 --> 00:00:51,057
this size command itself is actually

22
00:00:52,013 --> 00:00:53,096
returning a one by two matrix.

23
00:00:54,052 --> 00:00:55,089
So you can actually set SZ equals

24
00:00:56,028 --> 00:00:57,077
size of A and SZ

25
00:00:58,038 --> 00:00:59,032
is now a one by two

26
00:00:59,057 --> 00:01:00,075
matrix where the first element

27
00:01:01,064 --> 00:01:04,012
of this is three, and the second element of this is two.

28
00:01:04,070 --> 00:01:07,014
So, if you just type size of SZ. Does SZ

29
00:01:07,048 --> 00:01:08,076
is a one by

30
00:01:08,087 --> 00:01:10,037
two matrix whose two elements

31
00:01:10,082 --> 00:01:13,009
contain the dimensions of the

32
00:01:13,071 --> 00:01:15,010
matrix A. You can

33
00:01:15,023 --> 00:01:17,010
also type size A one

34
00:01:17,073 --> 00:01:19,012
to give you back the first

35
00:01:19,051 --> 00:01:21,025
dimension of A, size

36
00:01:21,051 --> 00:01:22,040
of the first dimension of A.

37
00:01:22,068 --> 00:01:23,079
So that's the number

38
00:01:24,010 --> 00:01:25,043
of rows and size A two

39
00:01:26,031 --> 00:01:28,012
to give you back two, which

40
00:01:28,031 --> 00:01:29,048
is the number of columns in

41
00:01:29,056 --> 00:01:31,084
the matrix A. 
If you

42
00:01:31,095 --> 00:01:33,087
have a vector V, so

43
00:01:33,098 --> 00:01:35,076
let's say V equals one, two,

44
00:01:36,003 --> 00:01:37,092
three, four, and you

45
00:01:38,004 --> 00:01:40,062
type length V.  What

46
00:01:40,081 --> 00:01:41,081
this does is it gives you

47
00:01:42,006 --> 00:01:43,040
the size of the longest dimension.

48
00:01:44,017 --> 00:01:45,023
So you can also type

49
00:01:45,059 --> 00:01:48,001
length A and because

50
00:01:48,050 --> 00:01:49,060
A is a three by

51
00:01:49,085 --> 00:01:51,089
two matrix, the longer

52
00:01:52,032 --> 00:01:53,043
dimension is of size

53
00:01:53,081 --> 00:01:55,095
three, so this should print out three.

54
00:01:56,007 --> 00:01:58,021
But usually we apply length only to vectors.

55
00:01:58,081 --> 00:01:59,084
So you know, length one, two,

56
00:02:00,020 --> 00:02:01,095
three, four, five, rather

57
00:02:02,023 --> 00:02:03,040
than apply length to matrices

58
00:02:03,098 --> 00:02:05,059
because that's a little more confusing.

59
00:02:07,062 --> 00:02:09,062
Now, let's look

60
00:02:10,006 --> 00:02:11,052
at how the low data and

61
00:02:11,086 --> 00:02:13,024
find data on the file system.

62
00:02:13,071 --> 00:02:14,090
When we start an Octave

63
00:02:15,021 --> 00:02:16,062
we're usually, we're often in

64
00:02:16,091 --> 00:02:18,078
a path that

65
00:02:19,003 --> 00:02:21,059
is, you know, the location of where the Octave location is.

66
00:02:21,075 --> 00:02:23,075
So the PWD command shows

67
00:02:24,006 --> 00:02:25,044
the current directory, or the

68
00:02:25,063 --> 00:02:28,059
current path that Octave is in.

69
00:02:28,068 --> 00:02:30,084
So right now we're in this maybe somewhat off scale directory.

70
00:02:31,091 --> 00:02:33,062
The CD command stands

71
00:02:34,000 --> 00:02:35,025
for change directory, so I

72
00:02:35,033 --> 00:02:40,005
can go to C:/Users/Ang/Desktop, and

73
00:02:40,065 --> 00:02:42,058
now I'm in, you know, in my Desktop

74
00:02:43,062 --> 00:02:45,050
and if I type OS,

75
00:02:45,090 --> 00:02:48,077
OS is, it comes from a Unix or a Linux command.

76
00:02:49,043 --> 00:02:50,053
But, OS will list the

77
00:02:50,062 --> 00:02:52,025
directories on my desktop and

78
00:02:52,041 --> 00:02:53,025
so these are the files

79
00:02:54,013 --> 00:02:55,083
that are on my Desktop right now.

80
00:03:15,084 --> 00:03:17,053
In fact, on my desktop are

81
00:03:17,083 --> 00:03:19,071
two files: Features X and

82
00:03:19,084 --> 00:03:21,031
Price Y that's maybe come

83
00:03:21,062 --> 00:03:23,034
from a machine learning problem I want to solve.

84
00:03:23,062 --> 00:03:24,062
So, here's my desktop.

85
00:03:25,075 --> 00:03:28,038
Here's Features X, and

86
00:03:29,009 --> 00:03:31,009
Features X is this window,

87
00:03:31,062 --> 00:03:34,000
excuse me, is this file with two columns of data.

88
00:03:34,046 --> 00:03:35,084
This is actually my housing prices data.

89
00:03:36,075 --> 00:03:38,021
So I think, you know, I

90
00:03:38,036 --> 00:03:40,018
think I have forty-seven rows in this data set.

91
00:03:40,063 --> 00:03:41,099
And so the first house

92
00:03:42,034 --> 00:03:43,071
has size two hundred four

93
00:03:43,096 --> 00:03:45,090
square feet, has three bedrooms; second

94
00:03:46,018 --> 00:03:47,009
house has sixteen hundred square

95
00:03:47,036 --> 00:03:49,019
feet, has three bedrooms; and so on.

96
00:03:49,087 --> 00:03:52,003
And Price Y is this

97
00:03:52,028 --> 00:03:54,081
file that has

98
00:03:55,003 --> 00:03:56,096
the prices of the data in my training set.

99
00:03:57,056 --> 00:03:59,055
So, Features X and

100
00:03:59,071 --> 00:04:01,062
Price Y are just text files with my data.

101
00:04:03,003 --> 00:04:04,016
How do I load this data into Octave?

102
00:04:04,072 --> 00:04:06,005
Well, I just type

103
00:04:06,009 --> 00:04:07,084
the command load Features X dot

104
00:04:08,015 --> 00:04:09,090
dat and if I

105
00:04:09,099 --> 00:04:11,056
do that, I load the Features X

106
00:04:11,096 --> 00:04:14,047
and can load Price Y dot dat. And

107
00:04:15,077 --> 00:04:17,000
by the way, there are multiple ways to do this.

108
00:04:17,031 --> 00:04:19,002
This command if you put

109
00:04:19,023 --> 00:04:20,047
Features X dot dat on that

110
00:04:20,085 --> 00:04:22,020
in strings and load it like so.

111
00:04:22,055 --> 00:04:24,080
This is a typo there.

112
00:04:25,049 --> 00:04:26,063
This is an equivalent command.

113
00:04:27,031 --> 00:04:28,077
So you can, this

114
00:04:29,036 --> 00:04:31,017
way I'm just putting the file name of the string

115
00:04:32,000 --> 00:04:33,063
in the founding in a

116
00:04:34,013 --> 00:04:35,047
string and in an

117
00:04:35,069 --> 00:04:38,081
Octave use single quotes to

118
00:04:38,093 --> 00:04:41,043
represent strings, like so.

119
00:04:41,091 --> 00:04:42,075
So that's a string, and we

120
00:04:42,086 --> 00:04:44,083
can load the file

121
00:04:45,043 --> 00:04:46,097
whose name is given by that string.

122
00:04:48,030 --> 00:04:50,075
Now the WHO command now

123
00:04:50,095 --> 00:04:52,039
shows me what variables I

124
00:04:52,048 --> 00:04:54,022
have in my Octave workspace.

125
00:04:54,056 --> 00:04:56,011
So Who shows me whether

126
00:04:56,032 --> 00:04:59,025
the variables that Octave has in memory currently.

127
00:04:59,094 --> 00:05:01,008
Features X and Price Y

128
00:05:01,037 --> 00:05:02,075
are among them, as well as

129
00:05:02,098 --> 00:05:04,012
the variables that, you know,

130
00:05:04,017 --> 00:05:05,068
we created earlier in this session.

131
00:05:06,031 --> 00:05:07,068
So I can type Features X

132
00:05:09,012 --> 00:05:10,076
to display features X. And

133
00:05:11,005 --> 00:05:12,081
there's my data.

134
00:05:14,019 --> 00:05:15,064
And I can type size features

135
00:05:16,041 --> 00:05:17,075
X and that's my

136
00:05:17,099 --> 00:05:19,035
47 by two matrix.

137
00:05:20,045 --> 00:05:21,082
And some of these size, press

138
00:05:22,031 --> 00:05:23,056
Y, that gives me

139
00:05:23,072 --> 00:05:25,043
my 47 by one vector.

140
00:05:26,075 --> 00:05:29,070
This is a 47 dimensional vector.

141
00:05:30,012 --> 00:05:31,087
This is all common vector that

142
00:05:32,002 --> 00:05:34,019
has all the prices Y in my training set.

143
00:05:35,024 --> 00:05:37,023
Now the who function shows

144
00:05:37,060 --> 00:05:39,043
you one of the variables that, in the current workspace.

145
00:05:40,006 --> 00:05:41,061
There's also the who S

146
00:05:42,018 --> 00:05:44,060
variable that gives you the detailed view.

147
00:05:45,033 --> 00:05:46,099
And so this also, with

148
00:05:47,026 --> 00:05:48,022
an S at the end this also

149
00:05:48,056 --> 00:05:49,081
lists my variables except that it

150
00:05:49,092 --> 00:05:51,049
now lists the sizes as well.

151
00:05:51,079 --> 00:05:52,058
So A is a three by

152
00:05:52,074 --> 00:05:54,041
two matrix and features

153
00:05:54,072 --> 00:05:56,016
X as a 47 by 2 matrix.

154
00:05:56,048 --> 00:05:58,085
Price Y is a 47 by one matrix.

155
00:05:59,029 --> 00:06:00,038
Meaning this is just a vector.

156
00:06:01,012 --> 00:06:03,030
And it shows, you know, how many bytes of memory it's taking up.

157
00:06:03,036 --> 00:06:05,042
As well as what type of data this is.

158
00:06:06,000 --> 00:06:07,037
Double means double position floating

159
00:06:07,075 --> 00:06:08,073
point so that just means that

160
00:06:08,081 --> 00:06:11,000
these are real values, the floating point numbers.

161
00:06:13,012 --> 00:06:13,099
Now if you want to get

162
00:06:14,017 --> 00:06:16,087
rid of a variable you can use the clear command.

163
00:06:17,033 --> 00:06:20,076
So clear features X and type whose again.

164
00:06:21,012 --> 00:06:22,074
You notice that the features X

165
00:06:23,043 --> 00:06:25,025
variable has now disappeared.

166
00:06:27,026 --> 00:06:28,018
And how do we save data?

167
00:06:28,061 --> 00:06:28,079
Let's see.

168
00:06:28,095 --> 00:06:29,098
Let's take the variable V and

169
00:06:30,031 --> 00:06:32,086
say that it's a price Y 1 colon 10.

170
00:06:33,006 --> 00:06:34,057
This sets V to be

171
00:06:34,079 --> 00:06:36,081
the first 10 elements of

172
00:06:38,086 --> 00:06:42,023
vector Y. So let's type who or whose.

173
00:06:43,022 --> 00:06:45,072
Whereas Y was a 47 by 1 vector.

174
00:06:46,058 --> 00:06:47,072
V is now 10 by 1.

175
00:06:48,038 --> 00:06:50,043
B equals price Y, one

176
00:06:50,077 --> 00:06:52,022
column ten that sets it

177
00:06:52,032 --> 00:06:53,031
to the just the first ten

178
00:06:53,050 --> 00:06:55,049
elements of Y. Let's say

179
00:06:55,062 --> 00:06:57,008
I wanna save this to date to disc

180
00:06:57,036 --> 00:06:59,056
the command save, hello.mat

181
00:07:00,012 --> 00:07:02,004
V. This will

182
00:07:02,031 --> 00:07:04,007
save the variable V into

183
00:07:04,037 --> 00:07:05,068
a file called hello.mat.

184
00:07:05,072 --> 00:07:07,029
So let's do that.

185
00:07:08,063 --> 00:07:10,055
And now a file

186
00:07:11,002 --> 00:07:12,055
has appeared on my Desktop, you

187
00:07:13,017 --> 00:07:14,062
know, called Hello.mat.

188
00:07:15,004 --> 00:07:16,013
I happen to have MATLAB installed

189
00:07:16,052 --> 00:07:17,050
in this window, which is why,

190
00:07:17,095 --> 00:07:19,048
you know, this icon looks

191
00:07:19,064 --> 00:07:21,018
like this because Windows is recognized

192
00:07:21,057 --> 00:07:23,018
as it's a MATLAB file,but don't

193
00:07:23,049 --> 00:07:24,042
worry about it if this file

194
00:07:24,088 --> 00:07:25,081
looks like it has a different

195
00:07:25,098 --> 00:07:28,047
icon on your machine and

196
00:07:28,075 --> 00:07:30,033
let's say I clear all my variables.

197
00:07:31,001 --> 00:07:32,011
So, if you type clear without

198
00:07:32,055 --> 00:07:35,023
anything then this actually deletes all of the variables in your workspace.

199
00:07:36,007 --> 00:07:37,093
So there's now nothing left in the workspace.

200
00:07:39,005 --> 00:07:40,081
And if I load hello.mat,

201
00:07:41,083 --> 00:07:44,025
I can now load back my

202
00:07:44,037 --> 00:07:45,069
variable v, which is

203
00:07:46,002 --> 00:07:47,062
the data that I

204
00:07:47,080 --> 00:07:49,044
previously saved into the hello.mat file.

205
00:07:51,001 --> 00:07:53,099
So, hello.mat, what we did just now to save hello.mat

206
00:07:54,062 --> 00:07:55,080
to view, this save the

207
00:07:55,087 --> 00:07:57,018
data in a binary format,

208
00:07:57,085 --> 00:07:59,020
a somewhat more compressed binary format.

209
00:07:59,066 --> 00:08:00,080
So if v is a lot

210
00:08:01,000 --> 00:08:03,032
of data, this, you know, will be somewhat more compressing.

211
00:08:03,087 --> 00:08:04,066
Will take off less the space.

212
00:08:05,064 --> 00:08:06,062
If you want to save your

213
00:08:06,075 --> 00:08:08,038
data in a human readable

214
00:08:08,091 --> 00:08:10,087
format then you type save hello.text

215
00:08:11,086 --> 00:08:13,083
the variable v and then -ascii.

216
00:08:14,011 --> 00:08:15,075
So, this will save

217
00:08:16,001 --> 00:08:18,050
it as a text

218
00:08:18,083 --> 00:08:20,045
or as ascii format of text.

219
00:08:21,033 --> 00:08:22,054
And now, once I've done

220
00:08:22,080 --> 00:08:24,044
that, I have this file.

221
00:08:24,085 --> 00:08:25,089
Hello.text has just

222
00:08:26,012 --> 00:08:28,013
appeared on my desktop, and

223
00:08:28,042 --> 00:08:29,072
if I open this up, we

224
00:08:29,092 --> 00:08:30,076
see that this is a text

225
00:08:30,094 --> 00:08:33,001
file with my data saved away.

226
00:08:33,089 --> 00:08:35,059
So that's how you load and save data.

227
00:08:36,054 --> 00:08:38,034
Now let's talk a bit about how to manipulate data.

228
00:08:38,080 --> 00:08:40,008
Let's set a equals to that

229
00:08:40,048 --> 00:08:44,090
matrix of the game so is my three by two matrix.

230
00:08:45,071 --> 00:08:46,026
So as indexing.

231
00:08:46,075 --> 00:08:48,016
So type A 3, 2.

232
00:08:48,049 --> 00:08:50,064
This indexes into

233
00:08:51,020 --> 00:08:52,024
the 3, 2 elements of

234
00:08:52,089 --> 00:08:54,016
the matrix A. So, this

235
00:08:54,037 --> 00:08:56,032
is what, you know,

236
00:08:56,039 --> 00:08:57,035
in normally, we will write this

237
00:08:57,050 --> 00:08:59,099
as a subscript 3, 2

238
00:09:00,042 --> 00:09:02,027
or A subscript,

239
00:09:03,057 --> 00:09:05,032
you know, 3, 2

240
00:09:05,037 --> 00:09:06,072
and so that's the element and

241
00:09:06,096 --> 00:09:08,011
third row and second column

242
00:09:08,063 --> 00:09:10,057
of A which is the element of six.

243
00:09:11,059 --> 00:09:13,082
I can also type A to

244
00:09:14,054 --> 00:09:16,037
comma colon to fetch

245
00:09:16,072 --> 00:09:18,001
everything in the second row.

246
00:09:18,085 --> 00:09:22,055
So, the colon means every

247
00:09:22,080 --> 00:09:26,014
element along that row or column.

248
00:09:27,041 --> 00:09:28,091
So, a of 2 comma

249
00:09:29,025 --> 00:09:32,003
colon is this second row of a. Right.

250
00:09:32,047 --> 00:09:35,020
And similarly, if I do a colon comma 2

251
00:09:35,067 --> 00:09:37,079
then this means get everything in

252
00:09:38,017 --> 00:09:40,082
the second column of A. So, this gives me 2 4 6.

253
00:09:41,032 --> 00:09:42,069
Right this means of

254
00:09:42,092 --> 00:09:44,059
A.  everything, second column.

255
00:09:45,050 --> 00:09:46,069
So, this is my second

256
00:09:46,097 --> 00:09:48,059
column A, which is 2 4 6.

257
00:09:49,064 --> 00:09:50,099
Now, you can also

258
00:09:51,027 --> 00:09:53,063
use somewhat most of the sophisticated index in the operations.

259
00:09:54,011 --> 00:09:55,078
So So, we just click each of an example.

260
00:09:56,055 --> 00:09:57,065
You do this maybe less often,

261
00:09:58,054 --> 00:10:01,039
but let me do this A 1 3 comma colon.

262
00:10:02,023 --> 00:10:03,044
This means get all of

263
00:10:03,050 --> 00:10:06,069
the elements of A who's first indexes one or three.

264
00:10:07,045 --> 00:10:08,058
This means I get everything from

265
00:10:08,074 --> 00:10:09,097
the first and third rows of

266
00:10:10,007 --> 00:10:11,058
A and from all

267
00:10:13,024 --> 00:10:13,024
columns.

268
00:10:14,076 --> 00:10:16,042
So, this was the

269
00:10:16,079 --> 00:10:18,025
matrix A and so A

270
00:10:18,044 --> 00:10:21,040
1 3 comma colon means get

271
00:10:21,089 --> 00:10:22,092
everything from the first row

272
00:10:23,025 --> 00:10:24,050
and from the second row and

273
00:10:25,000 --> 00:10:26,087
from the third row and the

274
00:10:27,011 --> 00:10:27,099
colon means, you know, one both

275
00:10:28,025 --> 00:10:29,037
of first and the second

276
00:10:29,057 --> 00:10:30,065
columns and so this

277
00:10:31,003 --> 00:10:32,058
gives me this 1 2 5 6.

278
00:10:32,078 --> 00:10:34,002
Although, you use the source

279
00:10:34,033 --> 00:10:36,012
of more subscript index

280
00:10:37,015 --> 00:10:38,025
operations maybe somewhat less often.

281
00:10:40,021 --> 00:10:41,012
To show you what else we can do.

282
00:10:41,040 --> 00:10:43,013
Here's the A matrix and this

283
00:10:43,051 --> 00:10:46,042
source A colon, to give me the second column.

284
00:10:47,022 --> 00:10:49,004
You can also use this to do assignments.

285
00:10:49,075 --> 00:10:51,003
So I can take the second column of

286
00:10:51,019 --> 00:10:52,058
A and assign that to

287
00:10:52,095 --> 00:10:54,099
10, 11, 12, and

288
00:10:55,066 --> 00:10:57,092
if I do that I'm now, you

289
00:10:58,012 --> 00:10:59,022
know, taking the second column of

290
00:10:59,028 --> 00:11:02,042
a and I'm assigning this column vector 10, 11, 12 to it.

291
00:11:02,071 --> 00:11:05,044
So, now a is this matrix that's 1, 3, 5.

292
00:11:05,048 --> 00:11:08,055
And the second column has been replaced by 10, 11, 12.

293
00:11:08,073 --> 00:11:12,038
And here's another operation.

294
00:11:14,067 --> 00:11:15,063
Let's set A to be equal

295
00:11:15,080 --> 00:11:17,042
to A comma 100, 101,

296
00:11:17,075 --> 00:11:18,099
102 like so and what

297
00:11:20,087 --> 00:11:23,074
this will do is

298
00:11:24,012 --> 00:11:26,080
depend another column vector

299
00:11:28,048 --> 00:11:28,087
to the right.

300
00:11:29,088 --> 00:11:32,083
So, now, oops.

301
00:11:33,025 --> 00:11:34,025
I think I made a little mistake.

302
00:11:36,079 --> 00:11:39,067
Should have put semicolons there

303
00:11:41,070 --> 00:11:43,071
and now A is equals to this.

304
00:11:44,020 --> 00:11:44,020
Okay?

305
00:11:44,040 --> 00:11:44,098
I hope that makes sense.

306
00:11:45,028 --> 00:11:46,027
So this 100, 101, 102.

307
00:11:46,041 --> 00:11:48,025
This is a column vector

308
00:11:48,082 --> 00:11:51,036
and what we did

309
00:11:51,064 --> 00:11:52,094
was we set A, take

310
00:11:53,033 --> 00:11:54,090
A and set it to the original definition.

311
00:11:56,014 --> 00:11:57,002
And then we put that column

312
00:11:57,037 --> 00:11:58,050
vector to the right

313
00:11:59,013 --> 00:11:59,094
and so, we ended up taking

314
00:12:00,019 --> 00:12:03,017
the matrix A and--which was

315
00:12:04,023 --> 00:12:05,001
these six elements on the left.

316
00:12:05,036 --> 00:12:06,039
So we took matrix

317
00:12:06,080 --> 00:12:08,021
A and we appended another

318
00:12:08,054 --> 00:12:09,047
column vector to the right;

319
00:12:09,077 --> 00:12:11,046
which is now why A is

320
00:12:11,077 --> 00:12:14,075
a three by three matrix that looks like that.

321
00:12:16,020 --> 00:12:17,078
And finally, one neat

322
00:12:18,000 --> 00:12:19,053
trick that I sometimes use

323
00:12:19,080 --> 00:12:21,075
if you do just a and just a colon like so.

324
00:12:21,096 --> 00:12:24,057
This is a somewhat special case syntax.

325
00:12:25,059 --> 00:12:28,027
What this means is that put all elements with A into

326
00:12:28,066 --> 00:12:30,012
a single column vector

327
00:12:30,085 --> 00:12:33,099
and this gives me a 9 by 1 vector.

328
00:12:34,050 --> 00:12:36,042
They adjust the other ones are combined together.

329
00:12:39,070 --> 00:12:43,095
Just a couple more examples. Let's see. Let's

330
00:12:45,029 --> 00:12:48,014
say I set A to be equal to 123456, okay?

331
00:12:49,089 --> 00:12:52,042
And let's say

332
00:12:54,005 --> 00:12:54,091
I set a B to B

333
00:12:55,067 --> 00:12:58,062
equal to 11, 12, 13, 14, 15, 16.

334
00:12:58,097 --> 00:13:00,010
I can create a new

335
00:13:00,034 --> 00:13:02,073
matrix C as A B.

336
00:13:03,020 --> 00:13:05,000
This just means my

337
00:13:05,008 --> 00:13:06,041
Matrix A. Here's my Matrix

338
00:13:06,062 --> 00:13:07,098
B and I've set C

339
00:13:08,040 --> 00:13:09,092
to be equal to AB.

340
00:13:11,007 --> 00:13:11,080
What I'm doing is I'm taking

341
00:13:12,011 --> 00:13:15,012
these two matrices and just concatenating onto each other.

342
00:13:15,041 --> 00:13:17,029
So the left, matrix A on the left.

343
00:13:18,041 --> 00:13:20,013
And I have the matrix B on the right.

344
00:13:20,079 --> 00:13:22,000
And that's how I formed

345
00:13:23,083 --> 00:13:25,052
this matrix C by putting them together.

346
00:13:27,011 --> 00:13:28,025
I can also do C equals

347
00:13:28,091 --> 00:13:31,075
A semicolon B. The semi

348
00:13:32,000 --> 00:13:34,028
colon notation means that

349
00:13:35,054 --> 00:13:38,045
I go put the next thing at the bottom.

350
00:13:38,087 --> 00:13:39,087
So, I'll do is a

351
00:13:39,090 --> 00:13:41,000
equals semicolon B. It also

352
00:13:41,016 --> 00:13:42,026
puts the matrices A

353
00:13:42,046 --> 00:13:43,094
and B together except that it

354
00:13:44,001 --> 00:13:45,088
now puts them on top of each other.

355
00:13:47,087 --> 00:13:49,025
so now I have A on top and B at the bottom and C here

356
00:13:49,063 --> 00:13:51,029
is now in 6 by 2 matrix.

357
00:13:52,002 --> 00:13:53,034
So, just say the semicolon

358
00:13:54,026 --> 00:13:56,049
thing usually means, you know, go to the next line.

359
00:13:56,065 --> 00:13:58,013
So, C is comprised by a

360
00:13:58,042 --> 00:13:59,025
and then go to the bottom

361
00:13:59,057 --> 00:14:00,061
of that and then put b

362
00:14:00,069 --> 00:14:02,032
in the bottom and by the

363
00:14:02,038 --> 00:14:03,084
way, this A B is

364
00:14:04,016 --> 00:14:05,037
the same as A, B and

365
00:14:05,075 --> 00:14:07,086
so you know, either of these gives you the same result.

366
00:14:10,030 --> 00:14:11,066
So, with that, hopefully you

367
00:14:11,089 --> 00:14:13,061
now know how to construct

368
00:14:14,025 --> 00:14:16,092
matrices and hopefully starts

369
00:14:17,019 --> 00:14:18,010
to show you some of the

370
00:14:18,014 --> 00:14:19,033
commands that you use

371
00:14:19,085 --> 00:14:21,059
to quickly put together matrices and

372
00:14:21,094 --> 00:14:22,099
take matrices and, you know,

373
00:14:23,037 --> 00:14:24,083
slam them together to form

374
00:14:25,000 --> 00:14:26,084
bigger matrices, and with

375
00:14:26,098 --> 00:14:28,007
just a few lines of code, Octave

376
00:14:28,089 --> 00:14:30,037
is very convenient in terms

377
00:14:30,071 --> 00:14:32,015
of how quickly we can assemble

378
00:14:32,064 --> 00:14:34,090
complex matrices and move data around.

379
00:14:36,004 --> 00:14:37,035
So that's it for moving data around.

380
00:14:38,001 --> 00:14:39,007
In the next video we'll start

381
00:14:39,033 --> 00:14:40,046
to talk about how to actually

382
00:14:40,086 --> 00:14:44,037
do complex computations on this, on our data.

383
00:14:46,083 --> 00:14:48,000
So, hopefully that gives you

384
00:14:48,010 --> 00:14:49,073
a sense of how, with

385
00:14:49,089 --> 00:14:50,087
just a few commands, you can

386
00:14:51,002 --> 00:14:53,045
very quickly move data around in Octave.

387
00:14:54,059 --> 00:14:55,080
You know, you load and save vectors and

388
00:14:56,017 --> 00:14:57,009
matrices, load and save data,

389
00:14:58,009 --> 00:14:59,057
put together matrices to create

390
00:15:00,012 --> 00:15:02,059
bigger matrices, index into or select

391
00:15:02,091 --> 00:15:04,019
specific elements on the matrices.

392
00:15:05,000 --> 00:15:05,062
I know I went through a lot

393
00:15:05,095 --> 00:15:06,078
of commands, so I think

394
00:15:06,098 --> 00:15:07,088
the best thing for you to do

395
00:15:08,016 --> 00:15:09,050
is afterward, to look

396
00:15:09,064 --> 00:15:11,034
at the transcript of the things I was typing.

397
00:15:12,019 --> 00:15:12,058
You know, look at it.

398
00:15:13,005 --> 00:15:14,023
Look at the coursework site and download

399
00:15:14,063 --> 00:15:15,064
the transcript of the session

400
00:15:15,095 --> 00:15:17,030
from there and look through

401
00:15:17,044 --> 00:15:18,062
the transcript and type some

402
00:15:18,082 --> 00:15:20,045
of those commands into Octave yourself

403
00:15:21,094 --> 00:15:24,028
and start to play with these commands and get it to work.

404
00:15:24,074 --> 00:15:27,059
And obviously, you know, there's no point at all to try to memorize all these commands.

405
00:15:28,009 --> 00:15:29,083
It's just, but what you

406
00:15:29,097 --> 00:15:31,055
should do is, hopefully from

407
00:15:31,074 --> 00:15:32,071
this video you have gotten a

408
00:15:32,087 --> 00:15:34,045
sense of the sorts of things you can do.

409
00:15:35,010 --> 00:15:36,035
So that when later on when

410
00:15:36,051 --> 00:15:37,063
you are trying to program a learning

411
00:15:37,082 --> 00:15:39,042
algorithms yourself, if you

412
00:15:39,060 --> 00:15:40,069
are trying to find a specific

413
00:15:40,092 --> 00:15:42,007
command that maybe you think

414
00:15:42,044 --> 00:15:43,057
Octave can do because you think

415
00:15:43,076 --> 00:15:45,011
you might have seen it here, you

416
00:15:45,024 --> 00:15:46,029
should refer to the transcript

417
00:15:47,024 --> 00:15:48,036
of the session and look through

418
00:15:48,055 --> 00:15:50,016
that in order to find the commands you wanna use.

419
00:15:51,064 --> 00:15:52,089
So, that's it for

420
00:15:52,099 --> 00:15:54,061
moving data around and in

421
00:15:54,082 --> 00:15:56,005
the next video what I'd like

422
00:15:56,012 --> 00:15:57,052
to do is start to tell

423
00:15:57,074 --> 00:15:58,077
you how to actually do

424
00:15:59,015 --> 00:16:01,025
complex computations on our

425
00:16:01,040 --> 00:16:03,044
data, and how to

426
00:16:03,054 --> 00:16:04,062
compute on the data, and

427
00:16:04,085 --> 00:16:06,055
actually start to implement learning algorithms.
