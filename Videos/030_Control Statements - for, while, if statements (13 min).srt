
1
00:00:00,018 --> 00:00:01,004
In this video, I'd like to

2
00:00:01,012 --> 00:00:02,031
tell you how to write

3
00:00:02,060 --> 00:00:03,077
control statements for your

4
00:00:03,083 --> 00:00:05,041
Octave programs, so things

5
00:00:05,070 --> 00:00:07,028
like "for", "while" and "if" statements

6
00:00:07,034 --> 00:00:10,033
and also how to define and use functions.

7
00:00:12,048 --> 00:00:13,017
Here's my Octave window. Let

8
00:00:13,097 --> 00:00:15,064
me first show you how to use a "for" loop.

9
00:00:16,048 --> 00:00:17,055
I'm going to start by setting v

10
00:00:17,085 --> 00:00:18,078
to be a 10 by

11
00:00:18,087 --> 00:00:20,030
1 vector 0.

12
00:00:20,082 --> 00:00:22,003
Now, here's I write

13
00:00:22,023 --> 00:00:24,003
a "for" loop for I equals 1 to 10.

14
00:00:25,008 --> 00:00:26,069
That's for I equals Y colon 10.

15
00:00:27,055 --> 00:00:29,069
And let's see, I'm

16
00:00:29,087 --> 00:00:31,001
going to set V of I

17
00:00:31,044 --> 00:00:33,006
equals two to the

18
00:00:33,021 --> 00:00:35,014
power of I, and finally

19
00:00:36,071 --> 00:00:36,071
end.

20
00:00:37,063 --> 00:00:38,078
The white space does not matter,

21
00:00:39,009 --> 00:00:40,000
so I am putting the spaces

22
00:00:40,050 --> 00:00:41,075
just to make it look nicely indented,

23
00:00:41,099 --> 00:00:43,057
but you know spacing doesn't matter.

24
00:00:44,042 --> 00:00:46,003
But if I do this, then the

25
00:00:46,014 --> 00:00:48,038
result is that V gets

26
00:00:48,060 --> 00:00:49,042
set to, you know, two to

27
00:00:49,050 --> 00:00:51,034
the power one, two to the power two, and so on.

28
00:00:51,049 --> 00:00:52,045
So this is syntax for I

29
00:00:52,063 --> 00:00:54,060
equals one colon 10 that

30
00:00:55,039 --> 00:00:56,065
makes I loop through the

31
00:00:57,043 --> 00:00:59,039
values one through 10.

32
00:00:59,063 --> 00:01:00,063
And by the way, you can also do

33
00:01:00,081 --> 00:01:02,025
this by setting your

34
00:01:02,046 --> 00:01:04,057
indices equals one to

35
00:01:04,079 --> 00:01:07,006
10, and so the

36
00:01:07,026 --> 00:01:09,009
indices in the array from one to 10.

37
00:01:09,025 --> 00:01:11,048
You can also write for I equals indices.

38
00:01:15,004 --> 00:01:17,059
And this is actually the same as if I equals one to 10.

39
00:01:17,081 --> 00:01:18,068
You can do, you know, display

40
00:01:19,048 --> 00:01:22,015
I and this would do the same thing.

41
00:01:23,031 --> 00:01:24,039
So, that is a "for" loop,

42
00:01:24,068 --> 00:01:26,017
if you are familiar with "break"

43
00:01:27,023 --> 00:01:28,095
and "continue", there's "break" and

44
00:01:29,034 --> 00:01:30,064
"continue" statements, you can

45
00:01:30,078 --> 00:01:31,082
also use those inside loops

46
00:01:31,098 --> 00:01:33,081
in octave, but first

47
00:01:33,085 --> 00:01:35,054
let me show you how a while loop works.

48
00:01:36,056 --> 00:01:38,075
So, here's my vector

49
00:01:39,012 --> 00:01:40,065
V. Let's write the while loop.

50
00:01:40,092 --> 00:01:43,076
I equals 1, while I

51
00:01:44,001 --> 00:01:45,009
is less than or equal to

52
00:01:45,023 --> 00:01:47,017
5, let's set

53
00:01:47,065 --> 00:01:49,081
V I equals one hundred

54
00:01:51,053 --> 00:01:54,028
and increment I by

55
00:01:54,040 --> 00:01:56,029
one, end.

56
00:01:56,070 --> 00:01:57,048
So this says what?

57
00:01:58,009 --> 00:01:59,064
I starts off equal to

58
00:01:59,096 --> 00:02:01,018
one and then I'm going

59
00:02:01,037 --> 00:02:02,045
to set V I equals one

60
00:02:02,060 --> 00:02:04,007
hundred and increment I by

61
00:02:04,026 --> 00:02:06,081
one until I is, you know, greater than five.

62
00:02:07,068 --> 00:02:08,069
And as a result of that,

63
00:02:09,034 --> 00:02:11,096
whereas previously V was this powers of two vector.

64
00:02:13,000 --> 00:02:14,005
I've now taken the first

65
00:02:14,058 --> 00:02:16,084
five elements of my vector

66
00:02:17,025 --> 00:02:19,011
and overwritten them with this value one hundred.

67
00:02:19,061 --> 00:02:21,012
So that's a syntax for a while loop.

68
00:02:23,013 --> 00:02:23,078
Let's do another example.

69
00:02:24,046 --> 00:02:26,019
Y equals one while

70
00:02:26,055 --> 00:02:28,025
true and here

71
00:02:28,050 --> 00:02:31,022
I wanted to show you how to use a break statement.

72
00:02:31,084 --> 00:02:33,003
Let's say V I equals 999

73
00:02:34,006 --> 00:02:35,090
and I equals i+1

74
00:02:38,011 --> 00:02:45,090
if i equals 6 break and

75
00:02:47,090 --> 00:02:47,090
end.

76
00:02:48,006 --> 00:02:48,084
And this is also our first

77
00:02:49,015 --> 00:02:50,096
use of an if statement, so

78
00:02:51,088 --> 00:02:52,096
I hope the logic of this makes sense.

79
00:02:53,030 --> 00:02:56,021
Since I equals one and, you know, increment loop.

80
00:02:57,034 --> 00:02:59,050
While repeatedly set V I equals 1

81
00:02:59,086 --> 00:03:01,025
and increment i by 1,

82
00:03:01,043 --> 00:03:02,066
and then when 1 i

83
00:03:02,091 --> 00:03:04,021
gets up to 6, do a

84
00:03:04,044 --> 00:03:05,047
break which breaks here although

85
00:03:05,068 --> 00:03:06,093
the while do and so, the

86
00:03:07,016 --> 00:03:07,094
effective is should be to take

87
00:03:08,056 --> 00:03:09,075
the first five elements of this

88
00:03:09,090 --> 00:03:11,061
vector V and set them to 999.

89
00:03:11,074 --> 00:03:14,037
And yes, indeed, we're taking

90
00:03:14,081 --> 00:03:17,012
V and overwritten the first five elements with 999.

91
00:03:18,033 --> 00:03:20,008
So, this is the

92
00:03:20,016 --> 00:03:21,081
syntax for "if" statements, and

93
00:03:21,096 --> 00:03:24,052
for "while" statement, and notice the end.

94
00:03:25,006 --> 00:03:26,059
We have two ends here.

95
00:03:27,016 --> 00:03:28,094
This ends here ends the if statement

96
00:03:29,072 --> 00:03:32,009
and the second end here ends the while statement.

97
00:03:33,025 --> 00:03:34,065
Now let me show you the more general syntax for

98
00:03:35,025 --> 00:03:37,024
how to use an if-else statement.

99
00:03:37,075 --> 00:03:40,012
So, let's see, V 1

100
00:03:40,024 --> 00:03:41,072
is equal to 999, let's

101
00:03:42,086 --> 00:03:45,034
type V1 equals to 2 for this example.

102
00:03:47,002 --> 00:03:48,044
So, let me type

103
00:03:48,074 --> 00:03:55,005
if V 1 equals 1 display the value as one.

104
00:03:57,046 --> 00:03:58,028
Here's how you write an else

105
00:03:58,055 --> 00:03:59,084
statement, or rather here's an

106
00:04:00,002 --> 00:04:03,033
else if: V 1 equals

107
00:04:03,081 --> 00:04:07,022
2. This is, if in case that's true in our example, display

108
00:04:08,003 --> 00:04:10,053
the value as 2, else

109
00:04:13,065 --> 00:04:16,095
display, the value is not one or two.

110
00:04:17,099 --> 00:04:20,052
Okay, so that's a  if-else

111
00:04:21,069 --> 00:04:23,012
if-else statement it ends.

112
00:04:23,087 --> 00:04:25,004
And of course, here we've just

113
00:04:25,025 --> 00:04:27,022
set v 1 equals 2, so hopefully, yup,

114
00:04:27,061 --> 00:04:28,095
displays that the value is 2.

115
00:04:30,077 --> 00:04:32,068
And finally, I don't

116
00:04:32,087 --> 00:04:34,001
think I talked about this earlier, but

117
00:04:34,013 --> 00:04:35,036
if you ever need to exit Octave,

118
00:04:35,061 --> 00:04:36,087
you can type the exit command and

119
00:04:36,091 --> 00:04:38,005
you hit enter that will cause Octave

120
00:04:38,039 --> 00:04:39,035
to quit or the 'q'--quits

121
00:04:39,098 --> 00:04:40,092
command also works.

122
00:04:42,044 --> 00:04:43,057
Finally, let's talk about

123
00:04:43,083 --> 00:04:44,082
functions and how to define

124
00:04:45,031 --> 00:04:46,069
them and how to use them.

125
00:04:48,062 --> 00:04:49,068
Here's my desktop, and I

126
00:04:49,072 --> 00:04:51,054
have predefined a file

127
00:04:52,005 --> 00:04:54,070
or pre-saved on my desktop a file called "squarethisnumber.m".

128
00:04:56,082 --> 00:04:54,070


129
00:04:56,082 --> 00:04:58,083
This is how you define functions in Octave.

130
00:04:59,048 --> 00:05:01,005
You create a file called, you know,

131
00:05:01,060 --> 00:05:03,064
with your function name and then ending in .m,

132
00:05:03,095 --> 00:05:05,033
and when Octave finds

133
00:05:05,073 --> 00:05:07,031
this file, it knows that this

134
00:05:07,068 --> 00:05:10,025
where it should look for the definition of the function "squarethisnumber.m".

135
00:05:12,033 --> 00:05:10,025


136
00:05:12,033 --> 00:05:13,002
Let's open up this file.

137
00:05:14,000 --> 00:05:15,043
Notice that I'm using the

138
00:05:15,070 --> 00:05:18,049
Microsoft program Wordpad to open up this file.

139
00:05:19,031 --> 00:05:20,005
I just want to encourage you, if

140
00:05:20,018 --> 00:05:23,020
your using Microsoft Windows, to

141
00:05:23,035 --> 00:05:24,088
use Wordpad rather than

142
00:05:25,011 --> 00:05:27,019
Notepad to open up these

143
00:05:27,049 --> 00:05:28,048
files, if you have a

144
00:05:28,052 --> 00:05:29,062
different text editor that's fine

145
00:05:29,088 --> 00:05:32,033
too, but notepad sometimes messes up the spacing.

146
00:05:33,035 --> 00:05:34,056
If you only have Notepad, that should

147
00:05:34,080 --> 00:05:36,005
work too, that could work

148
00:05:36,025 --> 00:05:37,041
too, but if you

149
00:05:37,069 --> 00:05:39,019
have Wordpad as well, I

150
00:05:39,031 --> 00:05:40,043
would rather use that or some

151
00:05:40,061 --> 00:05:42,093
other text editor, if you have a different text editor for editing your functions.

152
00:05:45,006 --> 00:05:46,093
So, here's how you define the function in Octave.

153
00:05:47,013 --> 00:05:48,056
Let me just zoom in a little bit.

154
00:05:49,075 --> 00:05:52,026
And this file has just three lines in it.

155
00:05:52,045 --> 00:05:54,004
The first line says function Y equals square root

156
00:05:54,042 --> 00:05:55,093
number of X, this tells

157
00:05:56,043 --> 00:05:57,031
Octave that I'm gonna return

158
00:05:57,069 --> 00:05:59,081
the value Y, I'm gonna

159
00:05:59,099 --> 00:06:01,012
return one value and that

160
00:06:01,024 --> 00:06:02,018
the value is going to

161
00:06:02,027 --> 00:06:03,072
be saved in the variable Y

162
00:06:04,037 --> 00:06:05,048
and moreover, it tells Octave

163
00:06:05,095 --> 00:06:07,016
that this function has one argument,

164
00:06:08,006 --> 00:06:10,006
which is the argument X,

165
00:06:10,042 --> 00:06:11,039
and the way the function

166
00:06:11,080 --> 00:06:13,070
body is defined, if Y equals X squared.

167
00:06:15,018 --> 00:06:16,023
So, let's try to call

168
00:06:16,050 --> 00:06:18,063
this function "square", this number

169
00:06:19,006 --> 00:06:21,050
5, and this actually

170
00:06:21,085 --> 00:06:22,093
isn't going to work, and

171
00:06:23,005 --> 00:06:25,017
Octave says square this number it's undefined.

172
00:06:25,068 --> 00:06:28,041
That's because Octave doesn't know where to find this file.

173
00:06:28,088 --> 00:06:30,001
So as usual, let's use PWD,

174
00:06:30,068 --> 00:06:31,069
or not in my directory,

175
00:06:32,056 --> 00:06:35,031
so let's see this c:\users\ang\desktop.

176
00:06:36,013 --> 00:06:37,018
That's where my desktop is.

177
00:06:39,087 --> 00:06:41,002
Oops, a little typo there.

178
00:06:41,024 --> 00:06:41,091
Users ANG desktop

179
00:06:42,077 --> 00:06:43,068
and if I now type square

180
00:06:44,001 --> 00:06:46,011
root number 5, it returns the

181
00:06:48,001 --> 00:06:48,025
answer 25.

182
00:06:48,037 --> 00:06:50,006
As kind of an advanced feature, this

183
00:06:50,031 --> 00:06:51,031
is only for those of you

184
00:06:51,050 --> 00:06:53,055
that know what the term search path means.

185
00:06:54,052 --> 00:06:55,075
But so if you

186
00:06:55,085 --> 00:06:56,081
want to modify the Octave

187
00:06:57,036 --> 00:06:58,074
search path and you

188
00:06:58,081 --> 00:06:59,062
could, you just think of

189
00:06:59,074 --> 00:07:00,075
this next part as advanced

190
00:07:01,076 --> 00:07:02,086
or optional material.

191
00:07:03,043 --> 00:07:04,006
Only for those who are either

192
00:07:04,018 --> 00:07:05,032
familiar with the concepts of

193
00:07:05,043 --> 00:07:06,057
search paths and permit languages,

194
00:07:07,064 --> 00:07:08,069
but you can use the

195
00:07:08,077 --> 00:07:10,066
term addpath, safety colon,

196
00:07:11,087 --> 00:07:15,061
slash users/ANG/desktop to

197
00:07:16,022 --> 00:07:17,068
add that directory to the

198
00:07:17,094 --> 00:07:19,038
Octave search path so that

199
00:07:19,069 --> 00:07:20,085
even if you know, go to

200
00:07:20,098 --> 00:07:22,037
some other directory I can

201
00:07:22,061 --> 00:07:24,011
still, Octave still knows

202
00:07:24,047 --> 00:07:25,079
to look in the users ANG

203
00:07:25,092 --> 00:07:28,070
desktop directory for functions

204
00:07:29,045 --> 00:07:30,029
so that even though I'm in

205
00:07:30,039 --> 00:07:31,056
a different directory now, it still

206
00:07:31,075 --> 00:07:34,042
knows where to find the square this number function.

207
00:07:35,013 --> 00:07:35,013
Okay?

208
00:07:35,035 --> 00:07:36,093
But if you're not familiar

209
00:07:37,037 --> 00:07:39,025
with the concept of search path, don't worry

210
00:07:39,043 --> 00:07:39,075
about it.

211
00:07:39,095 --> 00:07:40,072
Just make sure as you use

212
00:07:40,081 --> 00:07:41,093
the CD command to go to

213
00:07:42,004 --> 00:07:43,068
the directory of your function before

214
00:07:43,093 --> 00:07:45,041
you run it and that actually works just fine.

215
00:07:47,080 --> 00:07:49,011
One concept that Octave has

216
00:07:49,060 --> 00:07:50,072
that many other programming

217
00:07:50,095 --> 00:07:52,039
languages don't is that it

218
00:07:52,091 --> 00:07:54,054
can also let you define

219
00:07:54,088 --> 00:07:57,094
functions that return multiple values or multiple arguments.

220
00:07:58,087 --> 00:07:59,072
So here's an example of that.

221
00:08:00,068 --> 00:08:02,030
Define the function called square

222
00:08:02,092 --> 00:08:04,020
and cube this number X

223
00:08:04,093 --> 00:08:06,049
and what this says is this

224
00:08:06,066 --> 00:08:08,047
function returns 2 values, y1 and y2.

225
00:08:08,054 --> 00:08:09,076
When I set down, this

226
00:08:09,095 --> 00:08:12,007
follows, y1 is squared, y2 is execute.

227
00:08:13,058 --> 00:08:16,007
And what this does is this really returns 2 numbers.

228
00:08:16,098 --> 00:08:18,047
So, some of you depending

229
00:08:18,082 --> 00:08:19,081
on what programming language you use,

230
00:08:20,014 --> 00:08:22,030
if you're familiar with, you know, CC++ your offer.

231
00:08:22,093 --> 00:08:25,022
Often, we think of the function as return in just one value.

232
00:08:26,004 --> 00:08:27,017
But just so the syntax in Octave

233
00:08:27,082 --> 00:08:29,011
that should return multiple values.

234
00:08:32,042 --> 00:08:33,080
Now back in the Octave window. If

235
00:08:34,008 --> 00:08:36,096
I type, you know, a, b equals

236
00:08:37,089 --> 00:08:40,094
square and cube this

237
00:08:41,024 --> 00:08:44,023
number 5 then

238
00:08:44,061 --> 00:08:46,023
a is now equal to

239
00:08:46,028 --> 00:08:47,044
25 and b is equal to

240
00:08:47,075 --> 00:08:49,036
the cube of 5 equal to 125.

241
00:08:49,072 --> 00:08:51,002
So, this is often

242
00:08:51,066 --> 00:08:52,080
convenient if you needed to define

243
00:08:52,097 --> 00:08:54,097
a function that returns multiple values.

244
00:08:56,039 --> 00:08:57,027
Finally, I'm going to show

245
00:08:57,037 --> 00:09:00,000
you just one more sophisticated example of a function.

246
00:09:01,012 --> 00:09:02,012
Let's say I have a data set

247
00:09:02,037 --> 00:09:04,039
that looks like this, with data points at 1, 1, 2, 2, 3, 3.

248
00:09:04,042 --> 00:09:07,019
And what I'd like

249
00:09:07,062 --> 00:09:08,099
to do is to define an

250
00:09:09,007 --> 00:09:10,046
octave function to compute the cost

251
00:09:10,083 --> 00:09:13,011
function J of theta for different values of theta.

252
00:09:14,036 --> 00:09:15,087
First let's put the data into octave.

253
00:09:16,015 --> 00:09:17,034
So I set my design

254
00:09:17,070 --> 00:09:20,046
matrix to be 1,1,1,2,1,3.

255
00:09:21,000 --> 00:09:23,072
So, this is my design

256
00:09:24,004 --> 00:09:25,035
matrix x with x0, the

257
00:09:26,004 --> 00:09:27,028
first column being the said

258
00:09:27,041 --> 00:09:28,050
term and the second term being

259
00:09:28,076 --> 00:09:31,015
you know, my the x-values of my three training examples.

260
00:09:32,030 --> 00:09:33,044
And let me set

261
00:09:33,055 --> 00:09:35,035
y to be 1-2-3 as

262
00:09:35,045 --> 00:09:37,026
follows, which were the y axis values.

263
00:09:38,080 --> 00:09:40,000
So let's say theta

264
00:09:40,039 --> 00:09:42,055
is equal to 0 semicolon 1.

265
00:09:43,073 --> 00:09:45,059
Here at my desktop, I've

266
00:09:45,065 --> 00:09:46,096
predefined does cost function

267
00:09:47,049 --> 00:09:48,087
j and if I

268
00:09:49,000 --> 00:09:51,045
bring up the definition of that function it looks as follows.

269
00:09:52,000 --> 00:09:53,021
So function j equals cost function

270
00:09:53,058 --> 00:09:54,073
j equals x y

271
00:09:55,019 --> 00:09:56,091
theta, some commons, specifying

272
00:09:57,009 --> 00:09:59,029
the inputs and then

273
00:09:59,055 --> 00:10:01,005
vary few steps set m

274
00:10:01,035 --> 00:10:02,061
to be the number trading examples

275
00:10:03,001 --> 00:10:04,048
thus the number of rows in x.

276
00:10:05,050 --> 00:10:07,014
Compute the predictions, predictions equals

277
00:10:07,055 --> 00:10:09,065
x times theta and so

278
00:10:10,016 --> 00:10:11,047
this is a common that's wrapped

279
00:10:11,071 --> 00:10:13,076
around, so this is probably the preceding comment line.

280
00:10:14,072 --> 00:10:16,050
Computer script errors by, you know, taking

281
00:10:16,078 --> 00:10:18,015
the difference between your predictions and

282
00:10:18,063 --> 00:10:20,008
the y values and taking the

283
00:10:20,024 --> 00:10:21,087
element of y squaring and then

284
00:10:22,013 --> 00:10:24,012
finally computing the cost

285
00:10:24,036 --> 00:10:25,082
function J. And Octave knows

286
00:10:26,011 --> 00:10:27,007
that J is a value I

287
00:10:27,038 --> 00:10:30,005
want to return because J appeared here in the function definition.

288
00:10:31,041 --> 00:10:33,085
Feel free by the way to pause

289
00:10:34,016 --> 00:10:35,002
this video if you want

290
00:10:35,026 --> 00:10:36,025
to look at this function

291
00:10:36,062 --> 00:10:38,062
definition for longer and

292
00:10:38,079 --> 00:10:42,039
kind of make sure that you understand the different steps.

293
00:10:44,002 --> 00:10:45,002
But when I run it in

294
00:10:45,014 --> 00:10:46,023
Octave, I run j equals

295
00:10:46,059 --> 00:10:50,012
cost function j x y theta.

296
00:10:51,019 --> 00:10:54,087
It computes. Oops, made a typo there.

297
00:10:55,011 --> 00:10:56,087
It should have been capital X. It

298
00:10:56,099 --> 00:10:59,017
computes J equals 0 because

299
00:11:00,050 --> 00:11:04,001
if my data set was,

300
00:11:04,049 --> 00:11:06,044
you know, 123, 123 then setting, theta 0

301
00:11:06,098 --> 00:11:08,030
equals 0, theta 1 equals

302
00:11:08,076 --> 00:11:10,069
1, this gives me exactly the

303
00:11:10,086 --> 00:11:12,099
45-degree line that fits my data set perfectly.

304
00:11:15,060 --> 00:11:16,040
Whereas in contrast if I set

305
00:11:16,083 --> 00:11:19,049
theta equals say 0, 0,

306
00:11:19,083 --> 00:11:21,076
then this hypothesis is

307
00:11:22,053 --> 00:11:23,064
predicting zeroes on everything

308
00:11:24,002 --> 00:11:25,067
the same, theta 0 equals 0,

309
00:11:25,080 --> 00:11:26,097
theta 1 equals 0 and

310
00:11:27,008 --> 00:11:28,073
I compute the cost function

311
00:11:29,037 --> 00:11:31,042
then it's 2.333 and that's

312
00:11:31,079 --> 00:11:33,011
actually equal to 1 squared,

313
00:11:35,051 --> 00:11:36,052
which is my squared error on

314
00:11:36,074 --> 00:11:38,041
the first example, plus 2 squared,

315
00:11:39,079 --> 00:11:42,010
plus 3 squared and then

316
00:11:42,044 --> 00:11:45,014
divided by 2m, which is

317
00:11:45,025 --> 00:11:46,025
2 times number of training examples,

318
00:11:47,005 --> 00:11:48,072
which is indeed 2.33 and

319
00:11:50,063 --> 00:11:52,032
so, that sanity checks that

320
00:11:53,033 --> 00:11:54,074
this function here is, you

321
00:11:54,087 --> 00:11:56,000
know, computing the correct cost

322
00:11:56,026 --> 00:11:57,072
function and these are the couple examples

323
00:11:58,025 --> 00:11:59,075
we tried out on our

324
00:12:00,016 --> 00:12:01,030
simple training example.

325
00:12:03,049 --> 00:12:04,036
And so that sanity tracks

326
00:12:04,096 --> 00:12:07,012
that the cost function J,

327
00:12:08,072 --> 00:12:10,011
as defined here, that it

328
00:12:10,023 --> 00:12:12,052
is indeed, you know, seeming to compute

329
00:12:12,095 --> 00:12:14,060
the correct cost function, at least

330
00:12:14,091 --> 00:12:16,026
on our simple training set

331
00:12:17,042 --> 00:12:18,062
that we had here with X

332
00:12:18,078 --> 00:12:20,070
and Y being this

333
00:12:20,078 --> 00:12:22,041
simple training example that we solved.

334
00:12:25,023 --> 00:12:26,007
So, now you know how

335
00:12:26,021 --> 00:12:27,094
to right control statements like for loops,

336
00:12:28,015 --> 00:12:29,010
while loops and if statements

337
00:12:29,077 --> 00:12:31,091
in octave as well as how to define and use functions.

338
00:12:33,017 --> 00:12:34,033
In the next video, I'm

339
00:12:34,042 --> 00:12:35,060
going to just very quickly

340
00:12:36,007 --> 00:12:37,019
step you through the logistics

341
00:12:38,011 --> 00:12:39,054
of working on and

342
00:12:39,079 --> 00:12:41,050
submitting problem sets for

343
00:12:41,063 --> 00:12:44,014
this class and how to use our submission system.

344
00:12:45,023 --> 00:12:46,063
And finally, after that, in

345
00:12:46,077 --> 00:12:48,040
the final octave tutorial video,

346
00:12:48,079 --> 00:12:51,020
I wanna tell you about vectorization, which

347
00:12:51,037 --> 00:12:52,042
is an idea for how to

348
00:12:52,087 --> 00:12:54,087
make your octave programs run much fast.
