
1
00:00:00,010 --> 00:00:02,002
In this video, I'd like to talk

2
00:00:02,002 --> 00:00:03,073
about a new large-scale

3
00:00:03,073 --> 00:00:05,036
machine learning setting called

4
00:00:05,036 --> 00:00:07,007
the online learning setting.

5
00:00:07,044 --> 00:00:08,073
The online learning setting

6
00:00:08,073 --> 00:00:10,065
allows us to model problems

7
00:00:10,065 --> 00:00:12,007
where we have a continuous flood

8
00:00:12,007 --> 00:00:14,006
or a continuous stream of data

9
00:00:14,006 --> 00:00:15,090
coming in and we would like

10
00:00:15,090 --> 00:00:17,083
an algorithm to learn from that.

11
00:00:18,076 --> 00:00:20,075
Today, many of the largest

12
00:00:20,075 --> 00:00:22,024
websites, or many of the largest

13
00:00:22,024 --> 00:00:24,033
website companies use different

14
00:00:24,033 --> 00:00:25,090
versions of online learning

15
00:00:25,090 --> 00:00:28,010
algorithms to learn from

16
00:00:28,011 --> 00:00:29,046
the flood of users that keep

17
00:00:29,046 --> 00:00:31,037
on coming to, back to the website.

18
00:00:31,037 --> 00:00:32,094
Specifically, if you have

19
00:00:32,094 --> 00:00:34,099
a continuous stream of data

20
00:00:34,099 --> 00:00:36,037
generated by a continuous

21
00:00:36,037 --> 00:00:37,070
stream of users coming to

22
00:00:37,070 --> 00:00:39,041
your website, what you can

23
00:00:39,041 --> 00:00:40,084
do is sometimes use an

24
00:00:40,084 --> 00:00:42,063
online learning algorithm to learn

25
00:00:42,063 --> 00:00:44,049
user preferences from the

26
00:00:44,049 --> 00:00:46,032
stream of data and use that

27
00:00:46,032 --> 00:00:47,047
to optimize some of the

28
00:00:47,047 --> 00:00:49,063
decisions on your website.

29
00:00:52,006 --> 00:00:54,050
Suppose you run a shipping service,

30
00:00:54,050 --> 00:00:56,016
so, you know, users come and ask

31
00:00:56,016 --> 00:00:57,030
you to help ship their package from

32
00:00:57,030 --> 00:01:01,053
location A to location B and suppose

33
00:01:01,053 --> 00:01:02,071
you run a website, where users

34
00:01:02,071 --> 00:01:04,010
repeatedly come and they

35
00:01:04,010 --> 00:01:05,068
tell you where they want

36
00:01:05,068 --> 00:01:07,029
to send the package from, and

37
00:01:07,029 --> 00:01:08,052
where they want to send it to

38
00:01:08,052 --> 00:01:10,094
(so the origin and destination) and

39
00:01:10,094 --> 00:01:12,074
your website offers to ship the package

40
00:01:12,074 --> 00:01:14,051
for some asking price,

41
00:01:14,051 --> 00:01:16,009
so I'll ship your package for $50,

42
00:01:16,009 --> 00:01:17,092
I'll ship it for $20.

43
00:01:17,092 --> 00:01:19,034
And based on the price

44
00:01:19,034 --> 00:01:20,092
that you offer to the users,

45
00:01:20,092 --> 00:01:23,052
the users sometimes chose to use a shipping service;

46
00:01:23,052 --> 00:01:25,089
that's a positive example and

47
00:01:25,089 --> 00:01:28,016
sometimes they go away and

48
00:01:28,016 --> 00:01:29,072
they do not choose to

49
00:01:29,072 --> 00:01:31,071
purchase your shipping service.

50
00:01:31,071 --> 00:01:34,055
So let's say that we want

51
00:01:34,055 --> 00:01:36,038
a learning algorithm to help us

52
00:01:36,038 --> 00:01:38,049
to optimize what is the asking

53
00:01:38,049 --> 00:01:41,068
price that we want to offer to our users.

54
00:01:41,068 --> 00:01:43,072
And specifically, let's say we

55
00:01:43,072 --> 00:01:44,090
come up with some sort of features

56
00:01:44,090 --> 00:01:46,051
that capture properties of the users.

57
00:01:46,051 --> 00:01:49,037
If we know anything about the demographics,

58
00:01:49,037 --> 00:01:50,087
they capture, you know, the origin and

59
00:01:50,087 --> 00:01:54,040
destination of the package, where they want to ship the package.

60
00:01:54,040 --> 00:01:55,063
And what is the price

61
00:01:55,063 --> 00:01:57,091
that we offer to them for shipping the package.

62
00:01:57,091 --> 00:01:59,093
and what we want to do

63
00:01:59,093 --> 00:02:00,088
is learn what is the

64
00:02:00,088 --> 00:02:02,043
probability that they will

65
00:02:02,043 --> 00:02:03,076
elect to ship the

66
00:02:03,076 --> 00:02:05,045
package, using our

67
00:02:05,045 --> 00:02:07,031
shipping service given these features, and

68
00:02:07,031 --> 00:02:10,019
again just as a reminder these

69
00:02:10,019 --> 00:02:14,012
features X also captures the price that we're asking for.

70
00:02:14,012 --> 00:02:15,078
And so if we could

71
00:02:15,078 --> 00:02:17,048
estimate the chance that they'll

72
00:02:17,048 --> 00:02:19,062
agree to use our service

73
00:02:19,062 --> 00:02:20,096
for any given price, then we

74
00:02:20,096 --> 00:02:21,096
can try to pick

75
00:02:21,096 --> 00:02:23,018
a price so that they

76
00:02:23,018 --> 00:02:25,012
have a pretty high probability of

77
00:02:25,012 --> 00:02:27,084
choosing our website while simultaneously

78
00:02:27,084 --> 00:02:29,018
hopefully offering us a

79
00:02:29,018 --> 00:02:31,037
fair return, offering us

80
00:02:31,037 --> 00:02:34,029
a fair profit for shipping their package.

81
00:02:34,058 --> 00:02:36,048
So if we can learn this property

82
00:02:36,048 --> 00:02:37,073
of y equals 1 given

83
00:02:37,073 --> 00:02:38,063
any price and given the other

84
00:02:38,063 --> 00:02:39,065
features we could really

85
00:02:39,065 --> 00:02:41,065
use this to choose appropriate

86
00:02:41,065 --> 00:02:44,007
prices as new users come to us.

87
00:02:44,007 --> 00:02:45,090
So in order to model

88
00:02:45,090 --> 00:02:47,027
the probability of y equals 1,

89
00:02:47,027 --> 00:02:48,097
what we can do is use

90
00:02:48,097 --> 00:02:51,078
logistic regression or neural

91
00:02:51,078 --> 00:02:53,075
network or some other algorithm like that.

92
00:02:53,075 --> 00:02:55,088
But let's start with logistic regression.

93
00:02:57,065 --> 00:02:59,058
Now if you have a

94
00:02:59,058 --> 00:03:01,083
website that just runs continuously,

95
00:03:01,083 --> 00:03:05,034
here's what an online learning algorithm would do.

96
00:03:05,034 --> 00:03:07,047
I'm gonna write repeat forever.

97
00:03:07,047 --> 00:03:09,072
This just means that our website

98
00:03:09,072 --> 00:03:11,016
is going to, you know, keep on

99
00:03:11,016 --> 00:03:12,091
staying up.

100
00:03:12,091 --> 00:03:14,035
What happens on the website is

101
00:03:14,035 --> 00:03:16,046
occasionally a user

102
00:03:16,046 --> 00:03:17,094
will come and for

103
00:03:17,094 --> 00:03:19,057
the user that comes we'll get

104
00:03:19,057 --> 00:03:25,037
some x,y pair corresponding to

105
00:03:25,037 --> 00:03:29,009
a customer or to a user on the website.

106
00:03:29,009 --> 00:03:30,088
So the features x are, you

107
00:03:30,088 --> 00:03:32,081
know, the origin and destination specified

108
00:03:32,081 --> 00:03:34,011
by this user and the price

109
00:03:34,011 --> 00:03:35,035
that we happened to offer to

110
00:03:35,035 --> 00:03:37,029
them this time around, and

111
00:03:37,029 --> 00:03:38,043
y is either one or

112
00:03:38,043 --> 00:03:40,014
zero depending one whether or

113
00:03:40,014 --> 00:03:41,051
not they chose to

114
00:03:41,051 --> 00:03:43,098
use our shipping service.

115
00:03:43,098 --> 00:03:45,041
Now once we get this {x,y}

116
00:03:45,041 --> 00:03:46,081
pair, what an online

117
00:03:46,081 --> 00:03:48,039
learning algorithm does is then

118
00:03:48,039 --> 00:03:50,068
update the parameters theta

119
00:03:50,068 --> 00:03:54,001
using just this example

120
00:03:54,001 --> 00:03:57,072
x,y, and in particular

121
00:03:57,072 --> 00:03:59,083
we would update my parameters theta

122
00:03:59,083 --> 00:04:01,084
as Theta j get updated as Theta j

123
00:04:01,084 --> 00:04:06,061
minus the learning rate alpha times

124
00:04:06,061 --> 00:04:11,035
my usual gradient descent

125
00:04:11,035 --> 00:04:13,039
rule for logistic regression.

126
00:04:13,039 --> 00:04:14,049
So we do this for j

127
00:04:14,049 --> 00:04:15,065
equals zero up to n,

128
00:04:15,065 --> 00:04:19,008
and that's my close curly brace.

129
00:04:19,008 --> 00:04:21,021
So, for other learning algorithms

130
00:04:21,021 --> 00:04:22,087
instead of writing X-Y, right, I

131
00:04:22,087 --> 00:04:24,001
was writing things like Xi,

132
00:04:24,001 --> 00:04:26,049
Yi but

133
00:04:26,049 --> 00:04:27,084
in this online learning setting

134
00:04:27,084 --> 00:04:29,072
where actually discarding the notion

135
00:04:29,072 --> 00:04:31,046
of there being a fixed training

136
00:04:31,046 --> 00:04:32,090
set instead we have an algorithm.

137
00:04:32,090 --> 00:04:34,092
Now what happens as we get

138
00:04:34,092 --> 00:04:37,001
an example and then we

139
00:04:37,001 --> 00:04:38,082
learn using that example like

140
00:04:38,082 --> 00:04:41,003
so and then we throw that example away.

141
00:04:41,003 --> 00:04:43,009
We discard that example and we

142
00:04:43,009 --> 00:04:45,014
never use it again and

143
00:04:45,014 --> 00:04:47,016
so that's why we just look at one example at a time.

144
00:04:47,016 --> 00:04:48,087
We learn from that example.

145
00:04:48,087 --> 00:04:50,041
We discard it.

146
00:04:50,041 --> 00:04:51,052
Which is why, you know, we're

147
00:04:51,052 --> 00:04:52,094
also doing away with this

148
00:04:52,094 --> 00:04:54,061
notion of there being this

149
00:04:54,061 --> 00:04:58,019
sort of fixed training set indexed by i.

150
00:04:58,019 --> 00:04:59,032
And, if you really run

151
00:04:59,032 --> 00:05:01,048
a major website where you

152
00:05:01,048 --> 00:05:03,062
really have a continuous stream

153
00:05:03,062 --> 00:05:05,073
of users coming, then this

154
00:05:05,073 --> 00:05:07,052
sort of online learning algorithm

155
00:05:07,052 --> 00:05:10,035
is actually a pretty reasonable algorithm.

156
00:05:10,035 --> 00:05:12,007
Because of data is essentially

157
00:05:12,007 --> 00:05:13,032
free if you have so

158
00:05:13,032 --> 00:05:14,097
much data, that data

159
00:05:14,097 --> 00:05:17,002
is essentially unlimited then there

160
00:05:17,002 --> 00:05:17,099
is really may be no

161
00:05:17,099 --> 00:05:18,094
need to look at a

162
00:05:18,094 --> 00:05:21,052
training example more than once.

163
00:05:21,052 --> 00:05:22,043
Of course if we had only

164
00:05:22,043 --> 00:05:24,022
a small number of users then

165
00:05:24,022 --> 00:05:26,033
rather than using an online learning

166
00:05:26,033 --> 00:05:27,091
algorithm like this, you might

167
00:05:27,091 --> 00:05:29,042
be better off saving away all

168
00:05:29,042 --> 00:05:30,088
your data in a fixed training

169
00:05:30,088 --> 00:05:34,004
set and then running some algorithm over that training set.

170
00:05:34,004 --> 00:05:35,001
But if you really have a continuous

171
00:05:35,001 --> 00:05:36,034
stream of data, then an

172
00:05:36,034 --> 00:05:39,088
online learning algorithm can be very effective.

173
00:05:39,088 --> 00:05:41,017
I should mention also that one

174
00:05:41,017 --> 00:05:43,001
interesting effect of this sort

175
00:05:43,001 --> 00:05:44,007
of online learning algorithm is

176
00:05:44,007 --> 00:05:49,039
that it can adapt to changing user preferences.

177
00:05:51,000 --> 00:05:54,059
And in particular, if over

178
00:05:54,059 --> 00:05:55,077
time because of changes in

179
00:05:55,077 --> 00:05:58,037
the economy maybe users

180
00:05:58,037 --> 00:05:59,095
start to become more price

181
00:05:59,095 --> 00:06:01,039
sensitive and willing to pay,

182
00:06:01,039 --> 00:06:03,071
you know, less willing to pay high prices.

183
00:06:03,071 --> 00:06:06,052
Or if they become less price sensitive and they're willing to pay higher prices.

184
00:06:06,052 --> 00:06:08,029
Or if different things

185
00:06:08,029 --> 00:06:10,045
become more important to users,

186
00:06:10,045 --> 00:06:11,049
if you start to have new

187
00:06:11,049 --> 00:06:12,058
types of users coming to your website.

188
00:06:12,058 --> 00:06:14,093
This sort of online learning algorithm

189
00:06:14,093 --> 00:06:17,027
can also adapt to changing

190
00:06:17,027 --> 00:06:18,094
user preferences and kind

191
00:06:18,094 --> 00:06:20,015
of keep track of what your

192
00:06:20,015 --> 00:06:21,099
changing population of users

193
00:06:21,099 --> 00:06:24,068
may be willing to pay for.

194
00:06:24,068 --> 00:06:26,017
And it does that because if

195
00:06:26,017 --> 00:06:28,016
your pool of users changes,

196
00:06:28,016 --> 00:06:29,079
then these updates to your

197
00:06:29,079 --> 00:06:31,095
parameters theta will just slowly adapt

198
00:06:31,095 --> 00:06:33,055
your parameters to whatever your

199
00:06:33,055 --> 00:06:36,059
latest pool of users looks like.

200
00:06:36,059 --> 00:06:37,078
Here's another example of a

201
00:06:37,078 --> 00:06:40,075
sort of application to which you might apply online learning.

202
00:06:40,075 --> 00:06:43,047
this is an application in product

203
00:06:43,047 --> 00:06:44,070
search in which we want to

204
00:06:44,070 --> 00:06:46,011
apply learning algorithm to learn

205
00:06:46,011 --> 00:06:48,097
to give good search listings to a user.

206
00:06:48,097 --> 00:06:51,015
Let's say you run an online

207
00:06:51,015 --> 00:06:53,008
store that sells phones - that

208
00:06:53,008 --> 00:06:55,031
sells mobile phones or sells cell phones.

209
00:06:55,031 --> 00:06:56,068
And you have a user interface

210
00:06:56,068 --> 00:06:58,028
where a user can come to

211
00:06:58,028 --> 00:06:59,044
your website and type in the

212
00:06:59,044 --> 00:07:02,062
query like "Android phone 1080p camera".

213
00:07:02,062 --> 00:07:03,050
So 1080p is a type

214
00:07:03,050 --> 00:07:04,062
of a specification for a

215
00:07:04,062 --> 00:07:05,080
video camera that you might

216
00:07:05,080 --> 00:07:08,070
have on a phone, a cell phone, a mobile phone.

217
00:07:08,070 --> 00:07:12,010
Suppose, suppose we have a hundred phones in our store.

218
00:07:12,010 --> 00:07:13,035
And because of the way our

219
00:07:13,035 --> 00:07:15,032
website is laid out, when

220
00:07:15,032 --> 00:07:16,055
a user types in a query,

221
00:07:16,055 --> 00:07:18,027
if it was a search query, we

222
00:07:18,027 --> 00:07:19,060
would like to find a

223
00:07:19,060 --> 00:07:20,089
choice of ten different phones to

224
00:07:20,089 --> 00:07:22,092
show what to offer to the user.

225
00:07:22,092 --> 00:07:24,098
What we'd like to do is have

226
00:07:24,098 --> 00:07:26,056
a learning algorithm help us figure

227
00:07:26,056 --> 00:07:28,044
out what are the ten phones

228
00:07:28,044 --> 00:07:29,077
out of the 100 we

229
00:07:29,077 --> 00:07:31,079
should return the user in response to

230
00:07:31,079 --> 00:07:34,053
a user-search query like the one here.

231
00:07:34,053 --> 00:07:36,069
Here's how we can go about the problem.

232
00:07:37,021 --> 00:07:39,029
For each phone and given

233
00:07:39,029 --> 00:07:41,031
a specific user query; we

234
00:07:41,031 --> 00:07:44,012
can construct a feature vector

235
00:07:44,012 --> 00:07:45,067
X. So the feature

236
00:07:45,067 --> 00:07:47,064
vector X might capture different properties of the phone.

237
00:07:47,064 --> 00:07:49,097
It might capture things like,

238
00:07:49,097 --> 00:07:53,010
how similar the user search query is in the phones.

239
00:07:53,010 --> 00:07:54,005
We capture things like how many

240
00:07:54,005 --> 00:07:55,047
words in the user search

241
00:07:55,047 --> 00:07:56,017
query match the name of

242
00:07:56,017 --> 00:07:57,035
the phone, how many words

243
00:07:57,035 --> 00:08:01,030
in the user search query match the description of the phone and so on.

244
00:08:01,030 --> 00:08:02,078
So the features x capture

245
00:08:02,078 --> 00:08:03,067
properties of the phone and

246
00:08:03,067 --> 00:08:05,025
it captures things about how

247
00:08:05,025 --> 00:08:06,041
similar or how well

248
00:08:06,041 --> 00:08:10,059
the phone matches the user query along different dimensions.

249
00:08:10,059 --> 00:08:11,086
What we like to do is

250
00:08:11,086 --> 00:08:14,032
estimate the probability that a

251
00:08:14,032 --> 00:08:15,081
user will click on the

252
00:08:15,081 --> 00:08:17,067
link for a specific phone,

253
00:08:17,067 --> 00:08:18,088
because we want to show

254
00:08:18,088 --> 00:08:20,006
the user phones that they

255
00:08:20,006 --> 00:08:21,048
are likely to want to

256
00:08:21,048 --> 00:08:22,092
buy, want to show the user

257
00:08:22,092 --> 00:08:24,008
phones that they have high

258
00:08:24,008 --> 00:08:27,024
probability of clicking on in the web browser.

259
00:08:27,024 --> 00:08:29,056
So I'm going to define y equals

260
00:08:29,056 --> 00:08:30,067
one if the user clicks on

261
00:08:30,067 --> 00:08:31,093
the link for a phone and

262
00:08:31,093 --> 00:08:34,013
y equals zero otherwise and

263
00:08:34,013 --> 00:08:35,045
what I would like to do is

264
00:08:35,045 --> 00:08:36,099
learn the probability the user

265
00:08:36,099 --> 00:08:38,024
will click on a specific

266
00:08:38,024 --> 00:08:39,080
phone given, you know,

267
00:08:39,080 --> 00:08:41,069
the features x, which capture properties

268
00:08:41,069 --> 00:08:43,081
of the phone and how well the query matches the phone.

269
00:08:43,081 --> 00:08:45,070
To give this problem a name

270
00:08:45,070 --> 00:08:47,072
in the language of

271
00:08:47,072 --> 00:08:49,012
people that run websites like

272
00:08:49,012 --> 00:08:51,024
this, the problem of learning this is

273
00:08:51,024 --> 00:08:53,022
actually called the problem of

274
00:08:53,022 --> 00:08:57,029
learning the predicted click-through rate, the predicted CTR.

275
00:08:57,029 --> 00:08:58,079
It just means learning the probability

276
00:08:58,079 --> 00:09:00,049
that the user will click on

277
00:09:00,049 --> 00:09:01,069
the specific link that you

278
00:09:01,069 --> 00:09:03,002
offer them, so CTR is

279
00:09:03,002 --> 00:09:06,052
an abbreviation for click through rate.

280
00:09:06,052 --> 00:09:07,054
And if you can estimate the

281
00:09:07,054 --> 00:09:09,024
predicted click-through rate for any

282
00:09:09,024 --> 00:09:10,084
particular phone, what we

283
00:09:10,084 --> 00:09:12,017
can do is use this to

284
00:09:12,017 --> 00:09:13,081
show the user the ten phones

285
00:09:13,081 --> 00:09:15,076
that are most likely to click on,

286
00:09:15,076 --> 00:09:17,044
because out of the hundred phones,

287
00:09:17,044 --> 00:09:20,055
we can compute this for

288
00:09:20,055 --> 00:09:21,073
each of the 100 phones and

289
00:09:21,073 --> 00:09:22,075
just select the 10 phones

290
00:09:22,075 --> 00:09:25,075
that the user is most likely to click on,

291
00:09:25,075 --> 00:09:26,089
and this will be a pretty reasonable

292
00:09:26,089 --> 00:09:29,081
way to decide what ten results to show to the user.

293
00:09:29,081 --> 00:09:32,018
Just to be clear, suppose that

294
00:09:32,018 --> 00:09:33,044
every time a user does

295
00:09:33,044 --> 00:09:35,057
a search, we return ten results

296
00:09:35,057 --> 00:09:37,022
what that will do is it

297
00:09:37,022 --> 00:09:38,099
will actually give us ten

298
00:09:38,099 --> 00:09:40,087
x,y pairs, this actually

299
00:09:40,087 --> 00:09:43,033
gives us ten training examples every

300
00:09:43,033 --> 00:09:44,064
time a user comes to

301
00:09:44,064 --> 00:09:46,025
our website because, because for

302
00:09:46,025 --> 00:09:47,053
the ten phone that we chose

303
00:09:47,053 --> 00:09:48,088
to show the user, for each

304
00:09:48,088 --> 00:09:49,089
of those 10 phones we get

305
00:09:49,089 --> 00:09:51,038
a feature vector X, and

306
00:09:51,038 --> 00:09:52,073
for each of those 10 phones we

307
00:09:52,073 --> 00:09:54,056
show the user we will also

308
00:09:54,056 --> 00:09:56,017
get a value for y, we

309
00:09:56,017 --> 00:09:57,054
will also observe the value

310
00:09:57,054 --> 00:09:59,051
of y, depending on whether

311
00:09:59,051 --> 00:10:00,092
or not we clicked on that

312
00:10:00,092 --> 00:10:02,046
url or not and

313
00:10:02,046 --> 00:10:03,069
so, one way to run a

314
00:10:03,069 --> 00:10:04,090
website like this would be to

315
00:10:04,090 --> 00:10:06,083
continuously show the user,

316
00:10:06,083 --> 00:10:08,036
you know, your ten best guesses for

317
00:10:08,036 --> 00:10:09,089
what other phones they might like

318
00:10:09,089 --> 00:10:11,042
and so, each time a user

319
00:10:11,042 --> 00:10:12,072
comes you would get ten

320
00:10:12,072 --> 00:10:14,049
examples, ten x,y pairs,

321
00:10:14,049 --> 00:10:16,030
and then use an online

322
00:10:16,030 --> 00:10:17,095
learning algorithm to update the

323
00:10:17,095 --> 00:10:20,018
parameters using essentially 10

324
00:10:20,018 --> 00:10:21,069
steps of gradient descent on these

325
00:10:21,069 --> 00:10:23,038
10 examples, and then

326
00:10:23,038 --> 00:10:25,008
you can throw the data away, and

327
00:10:25,008 --> 00:10:26,059
if you really have a continuous

328
00:10:26,059 --> 00:10:27,089
stream of users coming to

329
00:10:27,089 --> 00:10:29,035
your website, this would be

330
00:10:29,035 --> 00:10:31,009
a pretty reasonable way to learn

331
00:10:31,009 --> 00:10:32,039
parameters for your algorithm

332
00:10:32,039 --> 00:10:33,083
so as to show the ten phones

333
00:10:33,083 --> 00:10:35,066
to your users that may

334
00:10:35,066 --> 00:10:39,001
be most promising and the most likely to click on.

335
00:10:39,001 --> 00:10:40,015
So, this is a product search

336
00:10:40,015 --> 00:10:41,049
problem or learning to rank

337
00:10:41,049 --> 00:10:44,021
phones, learning to search for phones example.

338
00:10:44,021 --> 00:10:46,042
So, I'll quickly mention a few others.

339
00:10:46,042 --> 00:10:47,037
One is, if you have

340
00:10:47,037 --> 00:10:48,023
a website and you're trying to

341
00:10:48,023 --> 00:10:49,043
decide, you know, what special

342
00:10:49,043 --> 00:10:50,032
offer to show the user,

343
00:10:50,032 --> 00:10:53,015
this is very similar to phones,

344
00:10:53,015 --> 00:10:54,071
or if you have a

345
00:10:54,071 --> 00:10:58,021
website and you show different users different news articles.

346
00:10:58,021 --> 00:10:59,091
So, if you're a news aggregator

347
00:10:59,091 --> 00:11:01,037
website, then you can

348
00:11:01,037 --> 00:11:02,030
again use a similar system to

349
00:11:02,030 --> 00:11:03,088
select, to show to

350
00:11:03,088 --> 00:11:05,055
the user, you know, what

351
00:11:05,055 --> 00:11:06,087
are the news articles that they

352
00:11:06,087 --> 00:11:08,015
are most likely to be interested

353
00:11:08,015 --> 00:11:11,010
in and what are the news articles that they are most likely to click on.

354
00:11:11,010 --> 00:11:13,049
Closely related to special offers, will we profit from recommendations.

355
00:11:13,049 --> 00:11:15,009
And in fact, if you have

356
00:11:15,009 --> 00:11:17,095
a collaborative filtering system, you

357
00:11:17,095 --> 00:11:20,069
can even imagine a collaborative filtering

358
00:11:20,069 --> 00:11:22,064
system giving you additional

359
00:11:22,064 --> 00:11:23,089
features to feed into a

360
00:11:23,089 --> 00:11:25,073
logistic regression classifier to try

361
00:11:25,073 --> 00:11:28,010
to predict the click through

362
00:11:28,010 --> 00:11:29,098
rate for different products that you might recommend to a user.

363
00:11:29,098 --> 00:11:32,027
Of course, I should say that

364
00:11:32,027 --> 00:11:34,020
any of these problems could also

365
00:11:34,020 --> 00:11:35,060
have been formulated as a

366
00:11:35,060 --> 00:11:39,087
standard machine learning problem, where you have a fixed training set.

367
00:11:39,087 --> 00:11:40,089
Maybe, you can run your

368
00:11:40,089 --> 00:11:41,082
website for a few days and

369
00:11:41,082 --> 00:11:43,072
then save away a training set,

370
00:11:43,072 --> 00:11:44,084
a fixed training set, and run

371
00:11:44,084 --> 00:11:45,077
a learning algorithm on that.

372
00:11:45,077 --> 00:11:48,069
But these are the actual

373
00:11:48,069 --> 00:11:49,095
sorts of problems, where you do

374
00:11:49,095 --> 00:11:51,090
see large companies get so

375
00:11:51,090 --> 00:11:53,071
much data, that there's really

376
00:11:53,071 --> 00:11:55,022
maybe no need to save away

377
00:11:55,022 --> 00:11:56,096
a fixed training set, but instead

378
00:11:56,096 --> 00:11:59,056
you can use an online learning algorithm to just learn continuously.

379
00:11:59,056 --> 00:12:04,009
from the data that users are generating on your website.

380
00:12:05,018 --> 00:12:07,024
So, that was the online

381
00:12:07,024 --> 00:12:08,099
learning setting and as we

382
00:12:08,099 --> 00:12:10,061
saw, the algorithm that we apply to

383
00:12:10,061 --> 00:12:12,035
it is really very similar

384
00:12:12,035 --> 00:12:13,086
to this schotastic gradient descent

385
00:12:13,086 --> 00:12:15,033
algorithm, only instead of

386
00:12:15,033 --> 00:12:16,087
scanning through a fixed

387
00:12:16,087 --> 00:12:18,000
training set, we're instead getting

388
00:12:18,000 --> 00:12:19,097
one example from a user,

389
00:12:19,097 --> 00:12:21,028
learning from that example, then

390
00:12:21,028 --> 00:12:22,064
discarding it and moving on.

391
00:12:22,064 --> 00:12:25,059
And if you have a continuous

392
00:12:25,059 --> 00:12:26,077
stream of data for some application,

393
00:12:26,077 --> 00:12:28,035
this sort of algorithm may be

394
00:12:28,035 --> 00:12:31,081
well worth considering for your application.

395
00:12:31,081 --> 00:12:33,095
And of course, one advantage of

396
00:12:33,095 --> 00:12:36,012
online learning is also that

397
00:12:36,012 --> 00:12:37,045
if you have a changing pool

398
00:12:37,045 --> 00:12:38,096
of users, or if the

399
00:12:38,096 --> 00:12:40,008
things you're trying to predict are

400
00:12:40,008 --> 00:12:42,003
slowly changing like your user

401
00:12:42,003 --> 00:12:43,075
taste is slowly changing, the online

402
00:12:43,075 --> 00:12:45,049
learning algorithm can slowly

403
00:12:45,049 --> 00:12:47,021
adapt your learned hypothesis to

404
00:12:47,021 --> 00:12:49,016
whatever the latest sets of

405
00:12:49,016 --> 99:59:59,000
user behaviors are like as well.
