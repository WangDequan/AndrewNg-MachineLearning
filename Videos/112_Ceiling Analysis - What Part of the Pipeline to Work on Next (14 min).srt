
1
00:00:00,009 --> 00:00:01,013
in earlier videos, I have

2
00:00:01,026 --> 00:00:02,050
said over and over that, when

3
00:00:02,064 --> 00:00:03,098
you are developing machine learning system,

4
00:00:04,076 --> 00:00:06,062
one of the most valuable resources is

5
00:00:06,080 --> 00:00:08,005
your time as the developer

6
00:00:08,049 --> 00:00:09,082
in terms of picking what

7
00:00:09,094 --> 00:00:11,051
to work on next.

8
00:00:11,094 --> 00:00:12,071
Or, you have a team of developers

9
00:00:13,030 --> 00:00:14,060
or a team of engineers working together

10
00:00:15,008 --> 00:00:16,062
on a machine learning system, again

11
00:00:16,092 --> 00:00:18,042
one of the most valuable resources is

12
00:00:18,098 --> 00:00:20,078
the time of the engineers or the developers working on the system.

13
00:00:22,042 --> 00:00:23,033
And what you really want to

14
00:00:23,042 --> 00:00:25,033
avoid is that you or

15
00:00:25,035 --> 00:00:26,041
your colleagues or your friends spend

16
00:00:26,067 --> 00:00:27,055
a lot of time working on

17
00:00:27,096 --> 00:00:29,051
some component, only to realize

18
00:00:30,046 --> 00:00:31,053
after weeks or months of

19
00:00:31,062 --> 00:00:33,007
time spent, that all that

20
00:00:33,031 --> 00:00:35,009
work, you know, just doesn't

21
00:00:35,038 --> 00:00:38,011
make a huge difference on the performance of the final system.

22
00:00:39,035 --> 00:00:40,042
In this video, what I'd

23
00:00:40,054 --> 00:00:42,096
like to to is, to talk about something called ceiling analysis.

24
00:00:44,050 --> 00:00:45,075
When you or your team

25
00:00:46,028 --> 00:00:47,027
are working on a pipeline

26
00:00:47,052 --> 00:00:48,085
machine learning system, this can

27
00:00:49,002 --> 00:00:50,038
sometimes give you a very

28
00:00:50,063 --> 00:00:51,064
strong signal, a very strong

29
00:00:52,034 --> 00:00:53,072
guidance, on what parts

30
00:00:54,014 --> 00:00:56,054
of the pipeline might be the best use of your time to work on.

31
00:00:59,074 --> 00:01:01,070
To talk about ceiling analysis, I'm

32
00:01:01,085 --> 00:01:03,014
going to keep on using the

33
00:01:03,068 --> 00:01:04,090
example of the photo

34
00:01:05,064 --> 00:01:06,087
OCR pipeline and I said

35
00:01:07,017 --> 00:01:08,026
earlier each of these

36
00:01:08,048 --> 00:01:09,090
boxes text detection, character

37
00:01:10,020 --> 00:01:12,014
segmentation, character recognition, each

38
00:01:12,031 --> 00:01:13,073
of these boxes can have even

39
00:01:14,009 --> 00:01:15,054
a small engineering team working

40
00:01:15,092 --> 00:01:17,037
on it, or maybe the

41
00:01:17,068 --> 00:01:18,064
entire system is just built

42
00:01:18,079 --> 00:01:19,070
by you, either way, but

43
00:01:19,095 --> 00:01:22,034
the question is, where should you allocate resources?

44
00:01:22,073 --> 00:01:24,025
Which of these boxes is

45
00:01:24,043 --> 00:01:26,062
most worth your efforts, trying

46
00:01:26,092 --> 00:01:28,026
to improve the performance of.

47
00:01:29,006 --> 00:01:30,034
In order to explain the idea

48
00:01:30,084 --> 00:01:32,056
of ceiling analysis, I'm going

49
00:01:32,073 --> 00:01:35,068
to keep using the example of our photo OCR pipeline.

50
00:01:37,000 --> 00:01:38,031
As I mentioned earlier, each of

51
00:01:38,043 --> 00:01:39,062
these boxes here, each of

52
00:01:39,084 --> 00:01:41,085
these machine learning components could be

53
00:01:42,017 --> 00:01:43,026
the work of even a

54
00:01:43,046 --> 00:01:44,071
small team of engineers, or

55
00:01:45,028 --> 00:01:48,010
maybe the whole system could be built by just one person.

56
00:01:48,078 --> 00:01:49,092
But the question is, where should

57
00:01:50,009 --> 00:01:51,098
you allocate scarce resources?

58
00:01:52,012 --> 00:01:53,020
Now this, which of these

59
00:01:53,068 --> 00:01:54,085
components, or which one or

60
00:01:54,095 --> 00:01:56,025
two or maybe all three of these components

61
00:01:57,007 --> 00:01:58,054
is most worth your time

62
00:01:59,020 --> 00:02:01,006
to try to improve the performance of.

63
00:02:01,065 --> 00:02:02,081
So here's the idea of ceiling analysis.

64
00:02:04,014 --> 00:02:05,051
As in the development process for

65
00:02:05,089 --> 00:02:07,017
other machine learning systems as

66
00:02:07,034 --> 00:02:08,049
well, in order to make

67
00:02:08,066 --> 00:02:09,074
decisions on what to do

68
00:02:09,096 --> 00:02:11,015
for developing the system

69
00:02:11,071 --> 00:02:12,077
is going to be

70
00:02:12,090 --> 00:02:14,006
very helpful to have a

71
00:02:14,058 --> 00:02:17,065
single road number evaluation metric for this learning system.

72
00:02:18,044 --> 00:02:19,038
So let's say we pick characters level accuracy.

73
00:02:19,053 --> 00:02:21,013
So if, you know, given a

74
00:02:21,056 --> 00:02:22,084
test set image, while just

75
00:02:22,086 --> 00:02:24,071
a fraction of alphabets of

76
00:02:25,006 --> 00:02:26,056
characters in the testing image that

77
00:02:28,097 --> 00:02:29,038
we recognize correctly.

78
00:02:29,055 --> 00:02:30,083
Or you can pick some other single world

79
00:02:31,003 --> 00:02:32,027
number evaluation metric, if you

80
00:02:32,037 --> 00:02:33,074
want, but let's say that

81
00:02:34,003 --> 00:02:35,081
whatever evaluation metric we

82
00:02:35,091 --> 00:02:37,068
pick, we get that, we

83
00:02:37,087 --> 00:02:40,009
find that the overall system currently has 72% accuracy.

84
00:02:40,034 --> 00:02:42,021
So, in other

85
00:02:42,034 --> 00:02:43,037
words, we have some set

86
00:02:43,052 --> 00:02:44,096
of test set images and for

87
00:02:45,018 --> 00:02:46,046
each test set images, we

88
00:02:46,063 --> 00:02:47,084
run it through text section, then

89
00:02:47,097 --> 00:02:49,028
character 7 nation, then character

90
00:02:49,056 --> 00:02:50,068
recognition, and we find

91
00:02:51,000 --> 00:02:52,024
that on our test set, the

92
00:02:52,037 --> 00:02:53,056
overall accuracy of the

93
00:02:53,080 --> 00:02:56,021
entire system was 72% on one of the metric you chose.

94
00:02:58,012 --> 00:02:59,069
Now just the idea behind

95
00:03:00,006 --> 00:03:01,061
sealing analysis which is that

96
00:03:01,090 --> 00:03:03,053
we're going to go to let

97
00:03:03,066 --> 00:03:05,009
see the first module of a

98
00:03:05,040 --> 00:03:06,081
machinery pipelines text detection.

99
00:03:07,027 --> 00:03:08,040
And what we are going

100
00:03:08,041 --> 00:03:09,016
to do is we are going to

101
00:03:09,027 --> 00:03:11,031
monkey around with the test set.

102
00:03:11,097 --> 00:03:12,091
We are going to go to the

103
00:03:12,099 --> 00:03:14,027
test set and for every test example

104
00:03:14,083 --> 00:03:16,016
we are just going to provide it

105
00:03:16,037 --> 00:03:18,022
the correct text detection outputs.

106
00:03:19,021 --> 00:03:20,030
In other words, we are going

107
00:03:20,056 --> 00:03:21,075
to the test set and just

108
00:03:21,096 --> 00:03:23,034
manually tell the algorithm

109
00:03:24,034 --> 00:03:26,021
where the text is

110
00:03:26,078 --> 00:03:27,093
in each of the test examples.

111
00:03:28,094 --> 00:03:29,096
So in other words, we

112
00:03:30,003 --> 00:03:31,050
are going to simulate what happens

113
00:03:32,003 --> 00:03:33,063
if we have a text detection

114
00:03:33,088 --> 00:03:35,034
system with a 100%

115
00:03:35,061 --> 00:03:37,018
accuracy, for the purpose

116
00:03:38,030 --> 00:03:40,040
of detecting text in an image.

117
00:03:42,005 --> 00:03:43,006
And really the way you

118
00:03:43,011 --> 00:03:44,021
do that is very simple right, instead

119
00:03:44,062 --> 00:03:45,084
of letting your learning algorithm

120
00:03:46,034 --> 00:03:47,062
detect the text in the images.

121
00:03:48,018 --> 00:03:49,011
You wouldn't say go to the

122
00:03:49,034 --> 00:03:51,022
images and just manually label what

123
00:03:51,053 --> 00:03:53,062
is the location of the text in my test set image.

124
00:03:54,019 --> 00:03:55,003
And you would then let these

125
00:03:55,053 --> 00:03:56,062
correct, so let these ground

126
00:03:56,099 --> 00:03:58,037
true labels of where as

127
00:03:58,056 --> 00:04:00,000
the text be part of

128
00:04:00,009 --> 00:04:01,033
your text set and use these

129
00:04:01,058 --> 00:04:02,099
ground true labels what you

130
00:04:03,011 --> 00:04:04,019
feed in to the next

131
00:04:04,046 --> 00:04:07,055
stage of the pipeline, to the character segmentation pipeline.

132
00:04:07,071 --> 00:04:09,025
So just said it again, by

133
00:04:09,068 --> 00:04:10,078
putting a checkmark over here,

134
00:04:11,050 --> 00:04:12,059
what I mean is Im going

135
00:04:12,075 --> 00:04:13,075
to go to my test set and

136
00:04:13,086 --> 00:04:14,096
just give it the correct answers,

137
00:04:15,047 --> 00:04:16,051
give it the correct labels, for

138
00:04:16,064 --> 00:04:18,025
the text detection part of the pipeline.

139
00:04:19,024 --> 00:04:20,027
So that, as it, I have

140
00:04:20,041 --> 00:04:21,069
a perfect text detection system

141
00:04:22,037 --> 00:04:24,026
on my test One into

142
00:04:24,045 --> 00:04:26,056
do that run this data

143
00:04:27,018 --> 00:04:28,014
to the rest of five points

144
00:04:28,052 --> 00:04:29,086
paper presentation and counter definition.

145
00:04:30,068 --> 00:04:31,093
And then, use the same

146
00:04:32,030 --> 00:04:33,031
evaluation metric as before,

147
00:04:34,000 --> 00:04:35,024
to measure what is the

148
00:04:35,044 --> 00:04:36,089
overall accuracy of the entire system.

149
00:04:37,079 --> 00:04:39,088
And with perfect hopefully the performance goes up.

150
00:04:40,032 --> 00:04:41,087
Let 's say it

151
00:04:41,093 --> 00:04:44,055
goes up 89% and then

152
00:04:44,068 --> 00:04:45,082
were going to keep going, next lets

153
00:04:46,008 --> 00:04:47,012
go to the next selection of

154
00:04:47,032 --> 00:04:50,023
pipeline, two character segmentation and again were going to go to my test.

155
00:04:50,054 --> 00:04:52,030
And now going to

156
00:04:52,038 --> 00:04:54,013
give the correct text detection

157
00:04:54,089 --> 00:04:55,097
output and give the correct

158
00:04:56,049 --> 00:04:58,022
character segmentation outputs and

159
00:04:59,039 --> 00:05:00,077
manually label the correct

160
00:05:01,032 --> 00:05:03,070
segment orientations of text into individual characters.

161
00:05:04,073 --> 00:05:05,056
And see how much that helps.

162
00:05:05,081 --> 00:05:06,067
And let's say it goes up to

163
00:05:06,080 --> 00:05:09,013
90% accuracy for the overall system.

164
00:05:10,006 --> 00:05:11,006
Alright so as always the accuracy is.

165
00:05:11,033 --> 00:05:13,042
Accuracy of the overall systems.

166
00:05:14,012 --> 00:05:15,045
So whatever the final output

167
00:05:15,082 --> 00:05:17,044
of the character recognition system is.

168
00:05:17,056 --> 00:05:18,087
Whatever the final output of

169
00:05:19,004 --> 00:05:19,066
the overall pipeline is, it's going

170
00:05:19,093 --> 00:05:22,039
to measure the accuracy of that.

171
00:05:22,051 --> 00:05:23,072
And then finally like character recognition

172
00:05:24,017 --> 00:05:26,017
system and give that the correct label as well.

173
00:05:26,077 --> 00:05:29,026
And if I do that too then, no surprise that I should get a 100% accuracy.

174
00:05:31,026 --> 00:05:32,052
Now, the nice thing about having

175
00:05:32,085 --> 00:05:34,033
done this analysis analysis is we

176
00:05:34,044 --> 00:05:36,007
can now understand what is

177
00:05:36,069 --> 00:05:40,025
the upside potential for improving each of these components.

178
00:05:41,038 --> 00:05:44,018
So we see that if we get perfect text detection.

179
00:05:44,094 --> 00:05:46,036
Our performance went up from

180
00:05:46,070 --> 00:05:48,007
72 to 89 percent, so

181
00:05:48,042 --> 00:05:50,067
that's' a 17 percent performance gain.

182
00:05:51,063 --> 00:05:52,068
So this means that you've

183
00:05:52,088 --> 00:05:54,002
to take your current system you

184
00:05:54,016 --> 00:05:56,012
spend a lot of time improving text detection.

185
00:05:57,032 --> 00:05:58,075
That means that we could potentially improve

186
00:05:59,019 --> 00:06:00,063
our system's performance by 17 percent.

187
00:06:01,001 --> 00:06:02,085
This seems like it's well worth our while.

188
00:06:03,076 --> 00:06:05,083
Whereas in contrast, when going

189
00:06:06,019 --> 00:06:08,036
from text detection When we

190
00:06:08,063 --> 00:06:12,044
gave it perfect character segmentation, performance went up only by one percent.

191
00:06:13,001 --> 00:06:14,081
So, that's a more sobering message.

192
00:06:15,025 --> 00:06:16,087
It means that no matter how

193
00:06:17,008 --> 00:06:18,050
much time you spend character segmentation,

194
00:06:19,080 --> 00:06:20,099
maybe the upside potential is

195
00:06:21,007 --> 00:06:22,027
going to be pretty small, and maybe

196
00:06:22,045 --> 00:06:23,042
you do not want to

197
00:06:23,057 --> 00:06:24,033
have a large team of engineers

198
00:06:24,086 --> 00:06:26,086
working on character segmentation that

199
00:06:26,099 --> 00:06:28,086
this sort of analysis shows that

200
00:06:29,014 --> 00:06:30,018
even when you give it the

201
00:06:30,025 --> 00:06:32,048
perfect character segmentation, your

202
00:06:32,062 --> 00:06:34,018
performance goes up by only one percent.

203
00:06:34,062 --> 00:06:36,008
So right there, this is really estimates.

204
00:06:36,088 --> 00:06:38,007
What is the ceiling, or what's

205
00:06:38,030 --> 00:06:39,036
an upper bound on how much

206
00:06:39,055 --> 00:06:40,068
you can improve the performance of your

207
00:06:40,074 --> 00:06:42,070
system by working on one of these components?

208
00:06:44,032 --> 00:06:45,060
And finally, going for character,

209
00:06:46,031 --> 00:06:47,069
when we get better

210
00:06:47,089 --> 00:06:50,007
character recognition, the performance went up by ten percent.

211
00:06:50,052 --> 00:06:51,063
So you know, again you

212
00:06:51,075 --> 00:06:52,056
can decide, is a ten

213
00:06:52,086 --> 00:06:55,062
percent improvement, how much is that working out?

214
00:06:55,082 --> 00:06:57,019
It tells you that maybe

215
00:06:57,039 --> 00:06:58,067
with more efforts spent on the

216
00:06:58,073 --> 00:06:59,068
last station of the pipeline,

217
00:07:00,036 --> 00:07:02,083
you can improve the performance

218
00:07:03,075 --> 00:07:04,050
of the systems as well.

219
00:07:05,061 --> 00:07:06,057
Another way of thinking about this

220
00:07:06,087 --> 00:07:08,008
is that, by going through this

221
00:07:08,029 --> 00:07:09,047
sort of analysis you're trying to

222
00:07:09,056 --> 00:07:10,063
figure out, you know, what is

223
00:07:10,074 --> 00:07:12,069
the upside potential, of improving

224
00:07:13,048 --> 00:07:14,098
each of these components or how

225
00:07:15,007 --> 00:07:16,073
much could you possibly gain if

226
00:07:17,025 --> 00:07:18,091
one of these components became absolutely

227
00:07:19,037 --> 00:07:20,077
perfect and just really

228
00:07:21,006 --> 00:07:23,023
places an upper bound on the performance of that system.

229
00:07:24,022 --> 00:07:26,029
So, the idea of ceiling analysis is pretty important.

230
00:07:26,089 --> 00:07:29,083
Let me just illustrate this idea again, but with a different example but a more complex one.

231
00:07:31,086 --> 00:07:32,099
Let's say that you want to

232
00:07:33,025 --> 00:07:34,082
do face recognition from images,

233
00:07:35,027 --> 00:07:35,095
so unless you want to look at

234
00:07:35,099 --> 00:07:37,064
the picture and recognize whether or

235
00:07:37,081 --> 00:07:38,076
not the person in this picture

236
00:07:39,047 --> 00:07:40,063
is a particular friend of yours,

237
00:07:40,067 --> 00:07:43,087
trying to recognize the person shown in this image.

238
00:07:44,018 --> 00:07:46,025
This is a slightly artificial example.

239
00:07:47,012 --> 00:07:51,007
This isn't actually how face

240
00:07:51,031 --> 00:07:52,079
recognition is done in

241
00:07:52,080 --> 00:07:53,066
practice, but I want to step through an example of what a

242
00:07:53,087 --> 00:07:54,080
pipeline might look like to

243
00:07:54,093 --> 00:07:56,022
give you another example of how

244
00:07:56,044 --> 00:07:57,081
a ceiling analysis process might look.

245
00:07:58,070 --> 00:07:59,098
So, we have a

246
00:08:00,016 --> 00:08:03,082
camera image and let's say that we design a pipeline as follows.

247
00:08:04,042 --> 00:08:05,012
Let's say the first thing you want

248
00:08:05,037 --> 00:08:07,048
to do is do pre-processing of

249
00:08:07,056 --> 00:08:08,076
the image, so let's take those

250
00:08:08,091 --> 00:08:10,031
images like I have shown on

251
00:08:10,038 --> 00:08:11,004
the upper right, and let's say we

252
00:08:11,013 --> 00:08:12,050
want to remove the background, so

253
00:08:13,002 --> 00:08:14,079
through pre-processing the background disappears.

254
00:08:16,006 --> 00:08:18,081
Next we want to say detect the face of the person.

255
00:08:19,037 --> 00:08:20,055
That's usually done with a learning algorithm.

256
00:08:20,093 --> 00:08:21,095
So we'll run a sliding

257
00:08:22,018 --> 00:08:24,089
windows crossfire to draw a box around the person's face.

258
00:08:25,068 --> 00:08:26,072
Having detected the face it

259
00:08:26,079 --> 00:08:27,064
turns out that if you

260
00:08:27,076 --> 00:08:29,031
want to recognize people it turns

261
00:08:29,052 --> 00:08:31,062
out that the eyes is a highly useful cue.

262
00:08:32,000 --> 00:08:33,086
We actually, in terms

263
00:08:34,012 --> 00:08:35,041
ofrecognizing your friends, the

264
00:08:35,070 --> 00:08:36,087
appearance of their eyes is actually

265
00:08:37,033 --> 00:08:38,067
one of the most important cues that you use.

266
00:08:39,047 --> 00:08:41,061
So let's run another crossfire to detect the eyes of the person.

267
00:08:42,050 --> 00:08:43,065
So, segment out the eyes,

268
00:08:44,040 --> 00:08:45,064
and then and since this

269
00:08:45,089 --> 00:08:47,028
will give us useful features to

270
00:08:47,037 --> 00:08:48,084
recognize a person, and then

271
00:08:49,010 --> 00:08:50,039
other parts of the face of physical interest.

272
00:08:50,099 --> 00:08:52,033
Maybe segment out the nose,

273
00:08:52,083 --> 00:08:54,075
segment out the mouth, and

274
00:08:54,098 --> 00:08:56,023
then, having found the

275
00:08:56,037 --> 00:08:57,005
eyes, the nose and the mouth,

276
00:08:57,034 --> 00:08:58,041
all of these give us useful

277
00:08:58,074 --> 00:08:59,091
features to maybe feed into

278
00:09:00,058 --> 00:09:01,053
a logistic regression crossfire.

279
00:09:02,050 --> 00:09:03,020
And it's the job of the

280
00:09:03,048 --> 00:09:04,041
crossfire to then give us the

281
00:09:04,071 --> 00:09:05,085
overall label to find the

282
00:09:05,097 --> 00:09:06,092
label for who we think

283
00:09:07,019 --> 00:09:08,045
is the identity of this person.

284
00:09:10,011 --> 00:09:11,073
So this is a kind of complicated pipeline.

285
00:09:12,015 --> 00:09:13,029
It's actually probably more complicated

286
00:09:13,095 --> 00:09:16,080
than you should be using, if you actually want to recognize people.

287
00:09:17,062 --> 00:09:20,033
But there's an illustrative example that's useful to think about for ceiling analysis.

288
00:09:22,014 --> 00:09:24,050
So how do you go through ceiling analysis for this pipeline?

289
00:09:25,000 --> 00:09:26,078
Well, we'll step through these pieces one at a time.

290
00:09:27,047 --> 00:09:28,089
Let's say your overall system has

291
00:09:29,014 --> 00:09:30,055
85 percent accuracy, the first

292
00:09:30,072 --> 00:09:31,066
thing I do is go to

293
00:09:31,075 --> 00:09:32,088
my test set and manually

294
00:09:33,086 --> 00:09:36,020
give it a ground foreground, background,

295
00:09:36,074 --> 00:09:38,009
segmentations, and then manually go to

296
00:09:38,014 --> 00:09:39,066
the test set, and use Photoshop

297
00:09:40,028 --> 00:09:41,075
or something, to just tell it

298
00:09:41,095 --> 00:09:43,012
where's the background, and just

299
00:09:43,036 --> 00:09:45,023
manually remove the background, so

300
00:09:45,047 --> 00:09:48,004
ground true background, and see how much the accuracy changes.

301
00:09:48,099 --> 00:09:50,032
In this example, the accuracy

302
00:09:50,079 --> 00:09:53,070
goes up by 0.1%  so

303
00:09:53,086 --> 00:09:54,089
this is a strong sign that

304
00:09:55,010 --> 00:09:56,024
even if you had perfect background

305
00:09:56,062 --> 00:09:59,067
segmentation your performance, even

306
00:09:59,084 --> 00:10:01,064
if perfect background removal, the

307
00:10:01,073 --> 00:10:03,074
performance of your system isn't going to go up that much.

308
00:10:03,087 --> 00:10:05,000
So this is maybe not worth a

309
00:10:05,019 --> 00:10:07,072
huge effort to work on pre-processing, on background removal.

310
00:10:09,026 --> 00:10:10,016
Then, everything goes to the

311
00:10:10,023 --> 00:10:11,028
test set, given the correct

312
00:10:11,077 --> 00:10:13,064
face detection images, then again

313
00:10:14,013 --> 00:10:16,069
step through the eyes, nose, mouth segmentations in some order.

314
00:10:17,010 --> 00:10:17,047
Pick one order.

315
00:10:17,070 --> 00:10:18,088
Let's give the correct location

316
00:10:19,034 --> 00:10:20,051
of the eyes, correct location of

317
00:10:20,075 --> 00:10:22,050
the nose, correct location of

318
00:10:22,051 --> 00:10:23,074
the mouth, and then finally

319
00:10:24,012 --> 00:10:26,020
if I just give it the correct overall label, I get 100% accuracy.

320
00:10:27,089 --> 00:10:29,038
And so, you know, as

321
00:10:29,050 --> 00:10:30,042
I go through the system

322
00:10:31,003 --> 00:10:32,008
and just give more and more

323
00:10:32,021 --> 00:10:33,089
components the correct labels

324
00:10:34,037 --> 00:10:35,035
in the test set, the performance

325
00:10:35,083 --> 00:10:37,054
So if the overall system goes up,

326
00:10:37,073 --> 00:10:38,063
and you can look at how much

327
00:10:38,088 --> 00:10:39,086
the performance went up on

328
00:10:40,024 --> 00:10:41,065
different steps, so, you know, from

329
00:10:42,054 --> 00:10:43,083
giving it the perfect face detection,

330
00:10:44,044 --> 00:10:45,026
and it looks like the overall

331
00:10:45,057 --> 00:10:48,028
performance of this system went up by 5.9 percent.

332
00:10:49,071 --> 00:10:50,066
So that's a pretty big jump,

333
00:10:50,098 --> 00:10:52,010
means that maybe it's worth quite

334
00:10:52,037 --> 00:10:53,065
a bit of effort on better face detection.

335
00:10:54,066 --> 00:10:56,028
Went four percent there, went

336
00:10:56,071 --> 00:10:58,067
one percent there, one percent

337
00:10:59,015 --> 00:11:00,060
there and three percent there.

338
00:11:01,051 --> 00:11:02,084
So it looks like the

339
00:11:02,098 --> 00:11:04,025
components that most worth

340
00:11:04,073 --> 00:11:06,051
our while are, when

341
00:11:06,067 --> 00:11:08,053
I gave it perfect face detection,

342
00:11:09,067 --> 00:11:10,019
system went up.

343
00:11:10,049 --> 00:11:11,099
By 5.9 performance, might give

344
00:11:12,016 --> 00:11:14,016
it perfect eye segmentation, went up

345
00:11:14,037 --> 00:11:15,053
by 4%, and then my final logistical

346
00:11:16,000 --> 00:11:19,022
crossfire, well there's another 3 percent gap there maybe.

347
00:11:19,057 --> 00:11:20,058
And so, this tells us

348
00:11:20,080 --> 00:11:23,039
maybe one of the components that are most worth our while working on.

349
00:11:24,061 --> 00:11:25,069
And by the way, I

350
00:11:25,083 --> 00:11:28,011
want to tell you, it's a true cautionary story.

351
00:11:28,067 --> 00:11:29,062
The reason I put in this

352
00:11:29,085 --> 00:11:32,035
pre-processing background removal is

353
00:11:32,060 --> 00:11:34,004
because I actually know

354
00:11:34,034 --> 00:11:35,052
of a true story where there

355
00:11:35,076 --> 00:11:37,013
was a research team that actually

356
00:11:37,048 --> 00:11:38,099
literally had two people spend

357
00:11:39,058 --> 00:11:40,025
about a year and a half,

358
00:11:40,052 --> 00:11:42,040
spend 18 months, working on

359
00:11:42,076 --> 00:11:44,004
better background removal.

360
00:11:44,048 --> 00:11:45,067
We are rushing here... I am

361
00:11:46,012 --> 00:11:47,049
obscuring the details for obvious

362
00:11:47,097 --> 00:11:48,076
reasons, but there was a

363
00:11:48,082 --> 00:11:50,061
computer vision application where there

364
00:11:50,072 --> 00:11:51,065
was a team of two engineers

365
00:11:51,076 --> 00:11:52,085
who literally spent I think

366
00:11:52,099 --> 00:11:54,021
about a year and a half, working

367
00:11:54,054 --> 00:11:56,004
on better background removal.

368
00:11:56,054 --> 00:11:57,072
Actually they worked out

369
00:11:57,082 --> 00:12:00,026
really complicated algorithms, so I ended up publishing I think, one research paper.

370
00:12:01,008 --> 00:12:02,000
But after all that work they

371
00:12:02,011 --> 00:12:03,001
found that, it just did

372
00:12:03,025 --> 00:12:04,090
not make a huge difference to

373
00:12:05,020 --> 00:12:06,049
the overall performance of the

374
00:12:06,071 --> 00:12:09,012
actual application they were working on.

375
00:12:09,045 --> 00:12:10,076
And if only, you know if

376
00:12:10,076 --> 00:12:13,016
only someone were to do a [xx] analysis

377
00:12:13,070 --> 00:12:15,078
beforehand, maybe we could have realized this.

378
00:12:17,024 --> 00:12:18,036
And one of them said to me

379
00:12:18,048 --> 00:12:19,050
afterward, you know, if only they

380
00:12:19,063 --> 00:12:20,058
had done the sort of analysis

381
00:12:20,085 --> 00:12:21,071
like this, maybe they could

382
00:12:21,099 --> 00:12:23,019
have realized before that 18 months

383
00:12:23,044 --> 00:12:25,017
of work, that they

384
00:12:25,024 --> 00:12:26,029
should have spent their effort focusing

385
00:12:26,067 --> 00:12:28,091
on some different component than literally

386
00:12:29,037 --> 00:12:31,023
spending 18 months working on background removal.

387
00:12:33,090 --> 00:12:36,013
So to summarize, pipelines are

388
00:12:36,038 --> 00:12:38,062
pretty pervasive and complex machine learning applications.

389
00:12:39,088 --> 00:12:40,095
And when you are working on

390
00:12:41,020 --> 00:12:42,077
a big machine learning application, I

391
00:12:42,083 --> 00:12:45,045
mean I think your time as a developer is so valuable.

392
00:12:46,009 --> 00:12:47,036
So just don't waste your

393
00:12:47,046 --> 00:12:50,012
time working on something that ultimately isn't going to matter.

394
00:12:51,035 --> 00:12:52,037
And in this video, we talked

395
00:12:52,049 --> 00:12:53,057
about this idea of ceiling analysis,

396
00:12:54,034 --> 00:12:55,075
which I've often found to

397
00:12:55,085 --> 00:12:57,000
be a very good tool for

398
00:12:57,012 --> 00:12:58,065
identifying the component, and if

399
00:12:58,075 --> 00:12:59,083
you actually put a focused effort

400
00:13:00,004 --> 00:13:01,000
on that component, and make a

401
00:13:01,025 --> 00:13:02,041
big difference, it would actually

402
00:13:03,004 --> 00:13:04,036
have a huge effect on the

403
00:13:04,062 --> 00:13:06,003
overall performance of your final system.

404
00:13:07,007 --> 00:13:08,000
So, over the years, working

405
00:13:08,034 --> 00:13:09,051
with machine learning, I've actually learned

406
00:13:09,071 --> 00:13:10,089
to not trust my own gut

407
00:13:11,010 --> 00:13:13,020
feeling about what component to work on.

408
00:13:13,027 --> 00:13:14,030
So, very often, when you have

409
00:13:14,053 --> 00:13:15,044
worked with machine learning for a

410
00:13:15,057 --> 00:13:17,015
long time, but often, our local

411
00:13:17,036 --> 00:13:18,076
machine learning problem, and I

412
00:13:18,095 --> 00:13:20,012
may have some gut feeling about,

413
00:13:20,045 --> 00:13:22,097
oh, let's, you know, jump on that component, and just spend more time on that.

414
00:13:24,012 --> 00:13:25,004
That over the years that I

415
00:13:25,015 --> 00:13:26,060
have come to even trust my

416
00:13:26,074 --> 00:13:27,079
own gut feelings and knowing not

417
00:13:28,012 --> 00:13:29,030
to trust gut feelings that much

418
00:13:29,098 --> 00:13:31,045
and instead really have a

419
00:13:31,051 --> 00:13:33,005
solid machine learning problem, where it's

420
00:13:33,017 --> 00:13:34,075
possible to structure things.

421
00:13:34,096 --> 00:13:36,034
To do a ceiling analysis often

422
00:13:36,065 --> 00:13:37,072
does a much better and much

423
00:13:37,090 --> 00:13:39,011
more reliable way for deciding

424
00:13:39,066 --> 00:13:40,089
where to put a focused effort

425
00:13:40,094 --> 00:13:42,026
into, to really improve this,

426
00:13:42,069 --> 00:13:44,057
the performance of some component and

427
00:13:44,067 --> 00:13:45,089
we kind of be sure that when

428
00:13:46,017 --> 00:13:46,096
do that it will actually have

429
00:13:47,020 --> 00:13:49,046
a huge effect on the final performance of your process system.
